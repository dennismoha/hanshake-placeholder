{"id":9917,"date":"2021-07-16T09:05:25","date_gmt":"2021-07-16T16:05:25","guid":{"rendered":"https:\/\/joinhandshake.com\/?post_type=our-team&#038;p=9917"},"modified":"2021-07-16T09:08:31","modified_gmt":"2021-07-16T16:08:31","slug":"efficient-search-with-different-structured-data-sets","status":"publish","type":"our-team","link":"https:\/\/joinhandshake.com\/blog\/our-team\/efficient-search-with-different-structured-data-sets\/","title":{"rendered":"The Full Picture: Managing Searches Across Complex Data Sets"},"content":{"rendered":"\n<p>As an engineer at Handshake, I help connect employers to qualified students &#8212; particularly ones that fall through the cracks of traditional recruiting. To this end, my team has been developing Candidate Hub, a one stop shop for employers to build relationships with students.&nbsp;<\/p>\n\n\n\n<p>A key part of our efforts has been integrating large data sets with different structures into one efficient search. We wanted to combine a large pool of information about student characteristics with information about how students were engaging with specific employers. Implementing this raised some significant scale challenges, which I&#8217;ll discuss in this article.<\/p>\n\n\n\n<h1>The Problem<\/h1>\n\n\n\n<p>Characteristics are student attributes, such as their major, school year, and job roles they have expressed interest in. Characteristics are relevant to all employers. We had several pre-existing features that included searches of characteristic information stored in an Elasticsearch index that aggregated data from a Postgres database, our primary source of truth.<\/p>\n\n\n\n<p>Interactions, on the other hand, are events that occur between a student and an employer<strong>. <\/strong>Our platform gives students many ways to engage with employers, such as exchanging messages or attending a virtual one-on-one. Unlike characteristics, a given interaction is only relevant to one employer. Information about interactions is stored in multiple different tables in Postgres.<\/p>\n\n\n\n<p>Searching interactions in conjunction with characteristics would give employers a powerful way to find and personalize their communications with the student. But actually implementing this search immediately raised some challenges. In addition to the structural differences, both data sets are large, together representing multiple terabytes. They also both get updated frequently as students use our platform.<\/p>\n\n\n\n<p>Initially, we experimented with an approach where we stored these data sets separately, only joining them at query time. However, this required us to join potentially very large result sets, leading to a massive transfer of data between systems and an unacceptably high query latency.<\/p>\n\n\n\n<p>We also considered precomputing the results, but doing so would prevent our employers from dynamically filtering their results, severely limiting the value of the search.<\/p>\n\n\n\n<p>We concluded that the only way to deliver the experience we wanted was to unify these two data sets into one searchable system. We just had to figure out what kind of system could meet all our requirements.<\/p>\n\n\n\n<h1>The Right Tool for the Job<\/h1>\n\n\n\n<p>Historically, Handshake has used Elasticsearch to support searches. Elasticsearch is flexible, scales well, and has an excellent community of knowledge and support. We had many Elasticsearch-based searches in production, but none approached the complexity of our current problem.<\/p>\n\n\n\n<p>Typically when building an index, we would denormalize relational data from our Postgres database to achieve the best search performance. We had used this approach to create our characteristics Elasticsearch index, which pulled data from nearly thirty different Postgres tables.<\/p>\n\n\n\n<p>However, interactions and characteristics didn&#8217;t seem to fit neatly into a single denormalized document. We naturally wanted to model this data as a query-time join, where a student document containing the characteristic information would join to separate documents representing their interactions.<\/p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"1024\" height=\"238\" src=\"https:\/\/i2.wp.com\/joinhandshake.com\/wp-content\/uploads\/2021\/07\/Database-Schema.png?resize=1024%2C238&#038;ssl=1\" alt=\"Database Schema\" class=\"wp-image-9920\" srcset=\"https:\/\/i2.wp.com\/joinhandshake.com\/wp-content\/uploads\/2021\/07\/Database-Schema.png?resize=1024%2C238&amp;ssl=1 1024w, https:\/\/i2.wp.com\/joinhandshake.com\/wp-content\/uploads\/2021\/07\/Database-Schema.png?resize=300%2C70&amp;ssl=1 300w, https:\/\/i2.wp.com\/joinhandshake.com\/wp-content\/uploads\/2021\/07\/Database-Schema.png?resize=768%2C179&amp;ssl=1 768w, https:\/\/i2.wp.com\/joinhandshake.com\/wp-content\/uploads\/2021\/07\/Database-Schema.png?resize=1536%2C358&amp;ssl=1 1536w, https:\/\/i2.wp.com\/joinhandshake.com\/wp-content\/uploads\/2021\/07\/Database-Schema.png?resize=2048%2C477&amp;ssl=1 2048w\" sizes=\"(max-width: 1000px) 100vw, 1000px\" data-recalc-dims=\"1\" \/><\/figure>\n\n\n\n<p>Given this mismatch between our mental model and Elasticsearch, we wondered if there was a better tool out there for our problem. Our ideal system would have:<\/p>\n\n\n\n<ul><li>Some method of joining across data types<\/li><li>The ability to search multiple dimensions efficiently, like Elasticsearch&#8217;s inverted indexes<\/li><li>Low query latency<\/li><li>Enterprise grade SLAs<\/li><\/ul>\n\n\n\n<p>With this criteria in mind, we considered several options to meet our data storage needs, including graph databases, Bigtable, and Apache Druid.<\/p>\n\n\n\n<h2>Graph Databases<\/h2>\n\n\n\n<p>Graph Databases, such as Neo4J or Amazon Neptune, offer the ability to search data based on its relationships with each other. This was a clear fit for interactions, which are relationships between students and employers. However, we were less clear on how graph databases would support our complex use cases for characteristic searches.<\/p>\n\n\n\n<p>We decided graph databases were too risky to pursue for this project, but we&#8217;d like to revisit them when we have a clearer use case!<\/p>\n\n\n\n<h2>Bigtable<\/h2>\n\n\n\n<p>Google Cloud Platform&#8217;s Bigtable database (and its more full-featured cousin, Datastore) is an enterprise grade NoSQL key-value store that works particularly well for time-series data. We were initially hopeful that its ability to support potentially thousands of columns in a data set would make it feasible to store interaction data alongside characteristic information. Unfortunately, while it would have been an excellent system for storing raw interaction data, using it for the unified data set would have required a prohibitive amount of duplication of characteristics.&nbsp;<\/p>\n\n\n\n<h2>Apache Druid<\/h2>\n\n\n\n<p>Apache Druid offers both some benefits of time series databases as well as some fuzzy field searching with a SQL-like query DSL. It supports semi-joins, in which the output from one query is fed into another. Unfortunately, we found the expected results from each of our datasets would exceed the volume we could handle in a semi-join.<\/p>\n\n\n\n<h2>Back to Elastic<\/h2>\n\n\n\n<p>None of the options we explored fit our use cases well enough to meet our bar for adopting a new technology, and so we turned our attention back to one we already trusted: Elasticsearch. We began exploring efficient ways to store and search our unified data sets. This led us to the world of Elasticsearch joins.<\/p>\n\n\n\n<h1>Elasticsearch Joins<\/h1>\n\n\n\n<p>Elasticsearch offers two strategies to handle simple joins: nested fields and parent-child joins. The <a href=\"https:\/\/www.elastic.co\/guide\/en\/elasticsearch\/reference\/current\/joining-queries.html\">Elasticsearch documentation<\/a> offers basic explanations for each approach. Based on that information, we thought either could apply to our problem, so we undertook an in-depth comparison of each.<\/p>\n\n\n\n<h2>Nested Fields<\/h2>\n\n\n\n<p>With the Nested field approach, we would store the unified data for a specific student in a single document. That document would contain the student&#8217;s characteristics as top level fields, and store the interactions in special nested fields. These nested fields would be structured as arrays of objects representing individual interactions.<\/p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-large is-resized\"><img loading=\"lazy\" src=\"https:\/\/i1.wp.com\/joinhandshake.com\/wp-content\/uploads\/2021\/07\/Student-Elasticsearch-Index-schema-nested-fields.png?resize=768%2C706&#038;ssl=1\" alt=\"Student Elasticsearch Index schema (nested fields)\" class=\"wp-image-9922\" width=\"768\" height=\"706\" srcset=\"https:\/\/i1.wp.com\/joinhandshake.com\/wp-content\/uploads\/2021\/07\/Student-Elasticsearch-Index-schema-nested-fields.png?resize=1024%2C941&amp;ssl=1 1024w, https:\/\/i1.wp.com\/joinhandshake.com\/wp-content\/uploads\/2021\/07\/Student-Elasticsearch-Index-schema-nested-fields.png?resize=300%2C276&amp;ssl=1 300w, https:\/\/i1.wp.com\/joinhandshake.com\/wp-content\/uploads\/2021\/07\/Student-Elasticsearch-Index-schema-nested-fields.png?resize=768%2C705&amp;ssl=1 768w, https:\/\/i1.wp.com\/joinhandshake.com\/wp-content\/uploads\/2021\/07\/Student-Elasticsearch-Index-schema-nested-fields.png?w=1204&amp;ssl=1 1204w\" sizes=\"(max-width: 768px) 100vw, 768px\" data-recalc-dims=\"1\" \/><\/figure><\/div>\n\n\n\n<p>Internally, Elasticsearch will store these nested objects as separate but closely related documents. This is invisible to consumers of the index.<\/p>\n\n\n\n<p>Pros of the Nested Field Approach:<\/p>\n\n\n\n<ul><li>The efficient format of document storage means queries on nested documents don&#8217;t suffer a performance penalty.<\/li><li>This architecture fit our existing patterns of homogenous Elasticsearch indices, in which we expect our indices to contain a single &#8220;type&#8221; of data, as opposed to a mix of characteristic and interaction data.<\/li><\/ul>\n\n\n\n<p>Cons of the Nested Field Approach:<\/p>\n\n\n\n<ul><li>Indexing performance can degrade when there are large amounts of nested documents. Elasticsearch must internally reindex both the parent document and all its nested documents any time any of the nested children are modified.&nbsp;<\/li><li>Data isolation becomes the responsibility of our business logic, rather than being built into our queries. A single student document contains information about the interactions with multiple employers, so it becomes the responsibility of our code to ensure one employer couldn&#8217;t access another employer&#8217;s data.<\/li><\/ul>\n\n\n\n<h2>Parent-Child Joins<\/h2>\n\n\n\n<p>With the parent-child join approach, we would have a single Elasticsearch index that contains two kinds of documents: parent documents corresponding to characteristics, and child documents corresponding to interactions. Child documents must be stored on the same shard as the parent document, but otherwise they are completely separate documents. We then would be able to query for parent documents whose children met our search conditions. Intuitively, this seemed like a good fit for our use case.<\/p>\n\n\n\n<div class=\"wp-block-image is-style-rounded\"><figure class=\"aligncenter size-large is-resized\"><img loading=\"lazy\" src=\"https:\/\/i2.wp.com\/joinhandshake.com\/wp-content\/uploads\/2021\/07\/Student-Elasticsearch-Index-schema-parent-child-joins.png?resize=768%2C645&#038;ssl=1\" alt=\"Student Elasticsearch Index schema (parent-child joins)\" class=\"wp-image-9924\" width=\"768\" height=\"645\" srcset=\"https:\/\/i2.wp.com\/joinhandshake.com\/wp-content\/uploads\/2021\/07\/Student-Elasticsearch-Index-schema-parent-child-joins.png?resize=1024%2C860&amp;ssl=1 1024w, https:\/\/i2.wp.com\/joinhandshake.com\/wp-content\/uploads\/2021\/07\/Student-Elasticsearch-Index-schema-parent-child-joins.png?resize=300%2C252&amp;ssl=1 300w, https:\/\/i2.wp.com\/joinhandshake.com\/wp-content\/uploads\/2021\/07\/Student-Elasticsearch-Index-schema-parent-child-joins.png?resize=768%2C645&amp;ssl=1 768w, https:\/\/i2.wp.com\/joinhandshake.com\/wp-content\/uploads\/2021\/07\/Student-Elasticsearch-Index-schema-parent-child-joins.png?w=1402&amp;ssl=1 1402w\" sizes=\"(max-width: 768px) 100vw, 768px\" data-recalc-dims=\"1\" \/><\/figure><\/div>\n\n\n\n<p><a href=\"https:\/\/www.elastic.co\/guide\/en\/elasticsearch\/reference\/current\/joining-queries.html\">The Elasticsearch documentation<\/a>, however, informed us that the parent-child joins are discouraged due to the performance hit of joined queries. Unsure of the real world impact, we did performance testing on a simplified workload. Our tests showed no significant difference between nested field queries and parent child joins, but based on our analysis of the difference in storage formats we estimated that parent-child queries would likely be 2-3 times slower on our production dataset.&nbsp;<\/p>\n\n\n\n<p>Pros of the Parent-Child Join Approach:<\/p>\n\n\n\n<ul><li>Better indexing performance than nested fields, since child documents are totally separate from the parent documents and can be updated independently.<\/li><li>Better data isolation &#8212; we can scope our queries to only return data from one employer.<\/li><\/ul>\n\n\n\n<p>Cons of the Parent-Child Approach:<\/p>\n\n\n\n<ul><li>Expected 2-3x slower query performance than nested fields.<\/li><li>Added complexity in our indexing pipeline to ensure that child documents end up on the same shard as their parent document.<\/li><li>Breaks the pattern of our existing Elasticsearch code, which assumes each index only contains one kind of document<\/li><\/ul>\n\n\n\n<h1>The Decision<\/h1>\n\n\n\n<p>After evaluating these pros and cons, we decided to pursue the nested pattern for our next version of Candidate Hub!<\/p>\n\n\n\n<p>The major deciding factors were the expected query performance, the lower disruption to our existing architecture, and the lower cost to change &#8212; because of the lower effort to implement, it&#8217;s less costly for us to switch from nested fields to parent-child joins than the reverse.<\/p>\n\n\n\n<p>This doesn&#8217;t mean we&#8217;ve ruled out revisiting parent-child joins in the future. This particular data set was not updated frequently enough that the indexing performance was a major concern, but future interaction types could be.&nbsp;<\/p>\n\n\n\n<p>While we can&#8217;t speak to all use cases, we suspect that nested fields are the better default choice for representing similar data sets in Elasticsearch. It&#8217;s more straightforward to implement, and gives better query performance. The exception to this is use cases with many frequently updated child documents. In that case, the indexing benefits of parent-child joins become more compelling.&nbsp;<\/p>\n\n\n\n<p>Hopefully our experience proves helpful to you the next time you&#8217;re trying to break down search problems of your own. Expect to hear more from us in the future about how we&#8217;re using Elasticsearch at Handshake!<\/p>\n\n\n\n<p><em>Thanks very much to Daniel Tunkelang for his invaluable contributions to this project and this blog post!<\/em><\/p>\n\n\n\n<p><\/p>\n\n\n\n<p><\/p>\n\n\n\n<p><\/p>\n\n\n\n<p><\/p>\n\n\n\n<p>Photo by <a href=\"https:\/\/unsplash.com\/@thisisengineering?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">ThisisEngineering RAEng<\/a> <\/p>\n","protected":false},"excerpt":{"rendered":"<p>Senior Software Engineer Savannah Worth shows us how to combine data sets with different structures into an efficient search and describes scale challenges she faced.<\/p>\n","protected":false},"author":167034990,"featured_media":9926,"menu_order":0,"template":"","our_team_category":[1615,1443],"our_team_tag":[1539,1429,1648],"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v16.8 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>The Full Picture: Managing Searches Across Complex Data Sets | Handshake<\/title>\n<meta name=\"description\" content=\"Learn how to combine data sets with different structures into an efficient search with Savannah Worth, Senior Software Engineer at Handshake\" \/>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/joinhandshake.com\/blog\/our-team\/efficient-search-with-different-structured-data-sets\/\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"The Full Picture: Managing Searches Across Complex Data Sets | Handshake\" \/>\n<meta property=\"og:description\" content=\"Learn how to combine data sets with different structures into an efficient search with Savannah Worth, Senior Software Engineer at Handshake\" \/>\n<meta property=\"og:url\" content=\"https:\/\/joinhandshake.com\/blog\/our-team\/efficient-search-with-different-structured-data-sets\/\" \/>\n<meta property=\"og:site_name\" content=\"Handshake\" \/>\n<meta property=\"article:publisher\" content=\"https:\/\/www.facebook.com\/joinhandshake\" \/>\n<meta property=\"article:modified_time\" content=\"2021-07-16T16:08:31+00:00\" \/>\n<meta property=\"og:image\" content=\"https:\/\/joinhandshake.com\/wp-content\/uploads\/2021\/07\/managing-searches-across-complex-data-sets.jpg\" \/>\n\t<meta property=\"og:image:width\" content=\"640\" \/>\n\t<meta property=\"og:image:height\" content=\"427\" \/>\n<meta name=\"twitter:card\" content=\"summary_large_image\" \/>\n<meta name=\"twitter:site\" content=\"@joinhandshake\" \/>\n<meta name=\"twitter:label1\" content=\"Est. reading time\" \/>\n\t<meta name=\"twitter:data1\" content=\"8 minutes\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"Organization\",\"@id\":\"https:\/\/joinhandshake.com\/#organization\",\"name\":\"Handshake\",\"url\":\"https:\/\/joinhandshake.com\/\",\"sameAs\":[\"https:\/\/www.facebook.com\/joinhandshake\",\"https:\/\/www.instagram.com\/joinhandshake\",\"https:\/\/www.linkedin.com\/company\/team-handshake\/\",\"https:\/\/twitter.com\/joinhandshake\"],\"logo\":{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/joinhandshake.com\/#logo\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/i1.wp.com\/joinhandshake.com\/wp-content\/uploads\/2019\/11\/handshake-share.png?fit=1200%2C628&ssl=1\",\"contentUrl\":\"https:\/\/i1.wp.com\/joinhandshake.com\/wp-content\/uploads\/2019\/11\/handshake-share.png?fit=1200%2C628&ssl=1\",\"width\":1200,\"height\":628,\"caption\":\"Handshake\"},\"image\":{\"@id\":\"https:\/\/joinhandshake.com\/#logo\"}},{\"@type\":\"WebSite\",\"@id\":\"https:\/\/joinhandshake.com\/#website\",\"url\":\"https:\/\/joinhandshake.com\/\",\"name\":\"Handshake\",\"description\":\"\",\"publisher\":{\"@id\":\"https:\/\/joinhandshake.com\/#organization\"},\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/joinhandshake.com\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"},{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/joinhandshake.com\/blog\/our-team\/efficient-search-with-different-structured-data-sets\/#primaryimage\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/i0.wp.com\/joinhandshake.com\/wp-content\/uploads\/2021\/07\/managing-searches-across-complex-data-sets.jpg?fit=640%2C427&ssl=1\",\"contentUrl\":\"https:\/\/i0.wp.com\/joinhandshake.com\/wp-content\/uploads\/2021\/07\/managing-searches-across-complex-data-sets.jpg?fit=640%2C427&ssl=1\",\"width\":640,\"height\":427},{\"@type\":\"WebPage\",\"@id\":\"https:\/\/joinhandshake.com\/blog\/our-team\/efficient-search-with-different-structured-data-sets\/#webpage\",\"url\":\"https:\/\/joinhandshake.com\/blog\/our-team\/efficient-search-with-different-structured-data-sets\/\",\"name\":\"The Full Picture: Managing Searches Across Complex Data Sets | Handshake\",\"isPartOf\":{\"@id\":\"https:\/\/joinhandshake.com\/#website\"},\"primaryImageOfPage\":{\"@id\":\"https:\/\/joinhandshake.com\/blog\/our-team\/efficient-search-with-different-structured-data-sets\/#primaryimage\"},\"datePublished\":\"2021-07-16T16:05:25+00:00\",\"dateModified\":\"2021-07-16T16:08:31+00:00\",\"description\":\"Learn how to combine data sets with different structures into an efficient search with Savannah Worth, Senior Software Engineer at Handshake\",\"breadcrumb\":{\"@id\":\"https:\/\/joinhandshake.com\/blog\/our-team\/efficient-search-with-different-structured-data-sets\/#breadcrumb\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/joinhandshake.com\/blog\/our-team\/efficient-search-with-different-structured-data-sets\/\"]}]},{\"@type\":\"BreadcrumbList\",\"@id\":\"https:\/\/joinhandshake.com\/blog\/our-team\/efficient-search-with-different-structured-data-sets\/#breadcrumb\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"name\":\"Home\",\"item\":\"https:\/\/joinhandshake.com\/\"},{\"@type\":\"ListItem\",\"position\":2,\"name\":\"The Full Picture: Managing Searches Across Complex Data Sets\"}]}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","yoast_head_json":{"title":"The Full Picture: Managing Searches Across Complex Data Sets | Handshake","description":"Learn how to combine data sets with different structures into an efficient search with Savannah Worth, Senior Software Engineer at Handshake","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/joinhandshake.com\/blog\/our-team\/efficient-search-with-different-structured-data-sets\/","og_locale":"en_US","og_type":"article","og_title":"The Full Picture: Managing Searches Across Complex Data Sets | Handshake","og_description":"Learn how to combine data sets with different structures into an efficient search with Savannah Worth, Senior Software Engineer at Handshake","og_url":"https:\/\/joinhandshake.com\/blog\/our-team\/efficient-search-with-different-structured-data-sets\/","og_site_name":"Handshake","article_publisher":"https:\/\/www.facebook.com\/joinhandshake","article_modified_time":"2021-07-16T16:08:31+00:00","og_image":[{"width":640,"height":427,"url":"https:\/\/joinhandshake.com\/wp-content\/uploads\/2021\/07\/managing-searches-across-complex-data-sets.jpg","path":"\/srv\/htdocs\/wp-content\/uploads\/2021\/07\/managing-searches-across-complex-data-sets.jpg","size":"full","id":9926,"alt":"","pixels":273280,"type":"image\/jpeg"}],"twitter_card":"summary_large_image","twitter_site":"@joinhandshake","twitter_misc":{"Est. reading time":"8 minutes"},"schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"Organization","@id":"https:\/\/joinhandshake.com\/#organization","name":"Handshake","url":"https:\/\/joinhandshake.com\/","sameAs":["https:\/\/www.facebook.com\/joinhandshake","https:\/\/www.instagram.com\/joinhandshake","https:\/\/www.linkedin.com\/company\/team-handshake\/","https:\/\/twitter.com\/joinhandshake"],"logo":{"@type":"ImageObject","@id":"https:\/\/joinhandshake.com\/#logo","inLanguage":"en-US","url":"https:\/\/i1.wp.com\/joinhandshake.com\/wp-content\/uploads\/2019\/11\/handshake-share.png?fit=1200%2C628&ssl=1","contentUrl":"https:\/\/i1.wp.com\/joinhandshake.com\/wp-content\/uploads\/2019\/11\/handshake-share.png?fit=1200%2C628&ssl=1","width":1200,"height":628,"caption":"Handshake"},"image":{"@id":"https:\/\/joinhandshake.com\/#logo"}},{"@type":"WebSite","@id":"https:\/\/joinhandshake.com\/#website","url":"https:\/\/joinhandshake.com\/","name":"Handshake","description":"","publisher":{"@id":"https:\/\/joinhandshake.com\/#organization"},"potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/joinhandshake.com\/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"},{"@type":"ImageObject","@id":"https:\/\/joinhandshake.com\/blog\/our-team\/efficient-search-with-different-structured-data-sets\/#primaryimage","inLanguage":"en-US","url":"https:\/\/i0.wp.com\/joinhandshake.com\/wp-content\/uploads\/2021\/07\/managing-searches-across-complex-data-sets.jpg?fit=640%2C427&ssl=1","contentUrl":"https:\/\/i0.wp.com\/joinhandshake.com\/wp-content\/uploads\/2021\/07\/managing-searches-across-complex-data-sets.jpg?fit=640%2C427&ssl=1","width":640,"height":427},{"@type":"WebPage","@id":"https:\/\/joinhandshake.com\/blog\/our-team\/efficient-search-with-different-structured-data-sets\/#webpage","url":"https:\/\/joinhandshake.com\/blog\/our-team\/efficient-search-with-different-structured-data-sets\/","name":"The Full Picture: Managing Searches Across Complex Data Sets | Handshake","isPartOf":{"@id":"https:\/\/joinhandshake.com\/#website"},"primaryImageOfPage":{"@id":"https:\/\/joinhandshake.com\/blog\/our-team\/efficient-search-with-different-structured-data-sets\/#primaryimage"},"datePublished":"2021-07-16T16:05:25+00:00","dateModified":"2021-07-16T16:08:31+00:00","description":"Learn how to combine data sets with different structures into an efficient search with Savannah Worth, Senior Software Engineer at Handshake","breadcrumb":{"@id":"https:\/\/joinhandshake.com\/blog\/our-team\/efficient-search-with-different-structured-data-sets\/#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/joinhandshake.com\/blog\/our-team\/efficient-search-with-different-structured-data-sets\/"]}]},{"@type":"BreadcrumbList","@id":"https:\/\/joinhandshake.com\/blog\/our-team\/efficient-search-with-different-structured-data-sets\/#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Home","item":"https:\/\/joinhandshake.com\/"},{"@type":"ListItem","position":2,"name":"The Full Picture: Managing Searches Across Complex Data Sets"}]}]}},"jetpack_sharing_enabled":true,"_links":{"self":[{"href":"https:\/\/joinhandshake.com\/wp-json\/wp\/v2\/our-team\/9917"}],"collection":[{"href":"https:\/\/joinhandshake.com\/wp-json\/wp\/v2\/our-team"}],"about":[{"href":"https:\/\/joinhandshake.com\/wp-json\/wp\/v2\/types\/our-team"}],"author":[{"embeddable":true,"href":"https:\/\/joinhandshake.com\/wp-json\/wp\/v2\/users\/167034990"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/joinhandshake.com\/wp-json\/wp\/v2\/media\/9926"}],"wp:attachment":[{"href":"https:\/\/joinhandshake.com\/wp-json\/wp\/v2\/media?parent=9917"}],"wp:term":[{"taxonomy":"our_team_category","embeddable":true,"href":"https:\/\/joinhandshake.com\/wp-json\/wp\/v2\/our_team_category?post=9917"},{"taxonomy":"our_team_tag","embeddable":true,"href":"https:\/\/joinhandshake.com\/wp-json\/wp\/v2\/our_team_tag?post=9917"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}