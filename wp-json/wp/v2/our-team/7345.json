{"id":7345,"date":"2021-02-26T16:33:13","date_gmt":"2021-02-27T00:33:13","guid":{"rendered":"https:\/\/joinhandshake.com\/?post_type=our-team&#038;p=7345"},"modified":"2021-02-26T16:47:22","modified_gmt":"2021-02-27T00:47:22","slug":"postgresql-and-lock-queue","status":"publish","type":"our-team","link":"https:\/\/joinhandshake.com\/blog\/our-team\/postgresql-and-lock-queue\/","title":{"rendered":"PostgreSQL and the Lock Queue"},"content":{"rendered":"\n<p><em><strong>Editor\u2019s note:<\/strong>\u00a0This article was originally published in February 2017, and was re-posted in February 2021.<\/em><\/p>\n\n\n\n<p>Here at Handshake, we deploy our site multiple times a day. Postgres is our primary data store, and since many migration operations are very cheap with Postgres we usually bundle database migration alongside our deploys. For this to be successful and not negatively impact performance during peak usage hours, we follow some simple rules for running migrations in production. For example, a few are:<\/p>\n\n\n\n<ul><li>Create indexes concurrently.<\/li><li>Don&#8217;t create NOT NULL columns in one operation for large tables.<\/li><li>Don&#8217;t create columns with default values in large tables.<\/li><\/ul>\n\n\n\n<p>\u200bHowever, a simple migration we ran a couple weeks ago brought the site down for an entire minute. Here&#8217;s a simple version of it:<br>\u200b<br><strong>Rails Version:<\/strong><\/p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-large\"><img loading=\"lazy\" width=\"1024\" height=\"165\" src=\"https:\/\/i2.wp.com\/joinhandshake.com\/wp-content\/uploads\/2021\/02\/Screen-Shot-2021-02-26-at-4.16.07-PM.png?resize=1024%2C165&#038;ssl=1\" alt=\"\" class=\"wp-image-7347\" srcset=\"https:\/\/i2.wp.com\/joinhandshake.com\/wp-content\/uploads\/2021\/02\/Screen-Shot-2021-02-26-at-4.16.07-PM.png?resize=1024%2C165&amp;ssl=1 1024w, https:\/\/i2.wp.com\/joinhandshake.com\/wp-content\/uploads\/2021\/02\/Screen-Shot-2021-02-26-at-4.16.07-PM.png?resize=300%2C48&amp;ssl=1 300w, https:\/\/i2.wp.com\/joinhandshake.com\/wp-content\/uploads\/2021\/02\/Screen-Shot-2021-02-26-at-4.16.07-PM.png?resize=768%2C124&amp;ssl=1 768w, https:\/\/i2.wp.com\/joinhandshake.com\/wp-content\/uploads\/2021\/02\/Screen-Shot-2021-02-26-at-4.16.07-PM.png?resize=1536%2C248&amp;ssl=1 1536w, https:\/\/i2.wp.com\/joinhandshake.com\/wp-content\/uploads\/2021\/02\/Screen-Shot-2021-02-26-at-4.16.07-PM.png?resize=2048%2C331&amp;ssl=1 2048w, https:\/\/i2.wp.com\/joinhandshake.com\/wp-content\/uploads\/2021\/02\/Screen-Shot-2021-02-26-at-4.16.07-PM.png?resize=640%2C103&amp;ssl=1 640w, https:\/\/i2.wp.com\/joinhandshake.com\/wp-content\/uploads\/2021\/02\/Screen-Shot-2021-02-26-at-4.16.07-PM.png?resize=1200%2C194&amp;ssl=1 1200w, https:\/\/i2.wp.com\/joinhandshake.com\/wp-content\/uploads\/2021\/02\/Screen-Shot-2021-02-26-at-4.16.07-PM.png?resize=1920%2C310&amp;ssl=1 1920w\" sizes=\"(max-width: 1000px) 100vw, 1000px\" data-recalc-dims=\"1\" \/><\/figure><\/div>\n\n\n\n<p><strong>SQL version: <\/strong><\/p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-large\"><img loading=\"lazy\" width=\"1024\" height=\"121\" src=\"https:\/\/i0.wp.com\/joinhandshake.com\/wp-content\/uploads\/2021\/02\/Screen-Shot-2021-02-26-at-4.16.13-PM.png?resize=1024%2C121&#038;ssl=1\" alt=\"\" class=\"wp-image-7348\" srcset=\"https:\/\/i0.wp.com\/joinhandshake.com\/wp-content\/uploads\/2021\/02\/Screen-Shot-2021-02-26-at-4.16.13-PM.png?resize=1024%2C121&amp;ssl=1 1024w, https:\/\/i0.wp.com\/joinhandshake.com\/wp-content\/uploads\/2021\/02\/Screen-Shot-2021-02-26-at-4.16.13-PM.png?resize=300%2C36&amp;ssl=1 300w, https:\/\/i0.wp.com\/joinhandshake.com\/wp-content\/uploads\/2021\/02\/Screen-Shot-2021-02-26-at-4.16.13-PM.png?resize=768%2C91&amp;ssl=1 768w, https:\/\/i0.wp.com\/joinhandshake.com\/wp-content\/uploads\/2021\/02\/Screen-Shot-2021-02-26-at-4.16.13-PM.png?resize=1536%2C182&amp;ssl=1 1536w, https:\/\/i0.wp.com\/joinhandshake.com\/wp-content\/uploads\/2021\/02\/Screen-Shot-2021-02-26-at-4.16.13-PM.png?resize=2048%2C243&amp;ssl=1 2048w, https:\/\/i0.wp.com\/joinhandshake.com\/wp-content\/uploads\/2021\/02\/Screen-Shot-2021-02-26-at-4.16.13-PM.png?resize=640%2C76&amp;ssl=1 640w, https:\/\/i0.wp.com\/joinhandshake.com\/wp-content\/uploads\/2021\/02\/Screen-Shot-2021-02-26-at-4.16.13-PM.png?resize=1200%2C142&amp;ssl=1 1200w, https:\/\/i0.wp.com\/joinhandshake.com\/wp-content\/uploads\/2021\/02\/Screen-Shot-2021-02-26-at-4.16.13-PM.png?resize=1920%2C228&amp;ssl=1 1920w\" sizes=\"(max-width: 1000px) 100vw, 1000px\" data-recalc-dims=\"1\" \/><\/figure><\/div>\n\n\n\n<h4 id=\"\u200b[hardBreak]Can-you-spot-the-problem?\">Can you spot the problem?<\/h4>\n\n\n\n<p><br>\u200bThe problem is adding the foreign key constraint on the new user reference. By default in Postgres, adding a foreign key constraint on a table requires an ACCESS EXCLUSIVE lock on the table the key is referencing. The ACCESS EXCLUSIVE lock in Postgres is the most <a href=\"https:\/\/www.postgresql.org\/docs\/9.1\/static\/explicit-locking.html\" target=\"_blank\" rel=\"noreferrer noopener\">restrictive type of lock<\/a> you can acquire. As the docs say:<\/p>\n\n\n\n<p><em>Only an ACCESS EXCLUSIVE lock blocks a SELECT (without FOR UPDATE\/SHARE) statement.<br>\u200b<br>So it blocks everything including SELECT statements on the table. SELECT statements happen to take out an ACCESS SHARE lock on the table, which is the least restrictive lock in Postgres. The <strong>only<\/strong> lock that ACCESS SHARE conflicts with is the ACCESS EXCLUSIVE lock.<br>\u200b<br>Normally this isn&#8217;t a problem. The steps Postgres follows to add this constraint are:<\/em><br>\u200b<\/p>\n\n\n\n<ol><li>Acquire ACCESS EXCLUSIVE lock on the users table.<\/li><li>Validate the integrating of all user_id references in the new table.<\/li><li>Commit the transaction with the foreign key relationship.<\/li><li>Release the lock.<\/li><\/ol>\n\n\n\n<p><br>Since the new table we&#8217;re adding is completely empty, the whole process is very quick. The problem comes in the way Postgres hands out locks. Locks are handed out using a queue, so if processes A and B are trying to acquire locks on the same resource, and process A requests the lock first, it will grant the lock to A first even if process B is requesting a less restrictive lock. This is where we hit trouble.<br>\u200b<br>Looking through the database logs from the migration there are many entries of:<br>\u200b<\/p>\n\n\n\n<p><em>LOG: process 31025 still waiting for AccessExclusiveLock on relation 17966 of database<br>\u200b<br>The process waiting is the one running the migration, and relation 17966 corresponds to the users table. You might not think this alone is cause for alarm; perhaps the migration will just take a while. As described above though locks are given in a first come, first served basis. As a result all the ACCESS SHARE locks from all select statements on the users table are blocked.<\/em><br>\u200b<br>The next line in the logs reveals everything this is blocking:<br>\u200b<br><em>DETAIL: Processes holding the lock: 29386. Wait queue: 31025, 30551, 29889, 30168, 29602, 30927, 29598, 30653, 29651, 29667, 29941, 30433, 29785, 30552, 30324, 30456, 30076, 29385, 29430, 29726, 30915, 29847, 31027, 30825, 29544, 31028, 30376, 29662, 29768, 31029, 30865, 31031, 31030, 31032, 31034, 31033, 29596, 31035, 31036, 31037, 31020, 31039, 29771, 30106, 30630, 31040, 30547, 31038, 31042, 31044, 31043, 31045, 31046, 31047, 31041, 31048, 31049, 31051, 31052, 31053, 31054, 31056, 31057, 31055, 31058, 31059, 31060, 31061, 31062, 31063, 31064, 31065, 31067, 31066, 31068, 31069, 31072, 31071, 31070, 31073, 31075, 31074, 31077, 31078, 31079, 31076, 31080, 31082, 31081, 31083, 31084, 31087, 31086, 31085, 31088, 31091, 31092, 31090, 31093, 31095, 31094, 31096, 31098, 31097, 31099, 31101, 31100, 31102, 31103, 31104, 31105, 31107, 31106, 31108, 31022, 31023, 31109, 31110, 31111, &#8230;<br>\u200b<br>What you can see here is that another process, 29386, is blocking the migration from getting its lock on the users table. Digging more through the logs that process corresponded to a long running query for one of our mailers. The long running read blocked the migration, which in turn blocked all reads on the users table.<br>We ended up aborting the migration and the site went back up.<\/em><br>\u200b<\/p>\n\n\n\n<h2 id=\"Prevention\">Prevention<\/h2>\n\n\n\n<p>\u200bIn a perfect world deploys never cause downtime. We do a root-cause analysis for every issue we encounter and change our processes to prevent future downtime. In this case, there are several measures that can prevent issues of this nature.<br>\u200b<\/p>\n\n\n\n<h3 id=\"Long-Running-Queries\">Long running queries<\/h3>\n\n\n\n<p>\u200bThe real root cause of this issue was that we tried to run a migration while there was a long running query on the users table. Long running queries are usually considered a Bad Idea\u2122, and we regularly try to find long running and slow queries and remove them from the application.<\/p>\n\n\n\n<h3 id=\"Timeouts\">Timeouts<\/h3>\n\n\n\n<p>\u200bAs a backup in case you can&#8217;t find all potential long running queries, Postgres has two <a href=\"https:\/\/www.postgresql.org\/docs\/9.3\/static\/runtime-config-client.html\" target=\"_blank\" rel=\"noreferrer noopener\">configurable timeouts<\/a> that would help in this scenario. The first is lock_timeout:<\/p>\n\n\n\n<p><em>Abort any statement that waits longer than the specified number of milliseconds while attempting to acquire a lock on a table, index, row, or other database object. The time limit applies separately to each lock acquisition attempt. The limit applies both to explicit locking requests (such as LOCK TABLE, or SELECT FOR UPDATE without NOWAIT) and to implicitly-acquired locks. If log_min_error_statement is set to ERROR or lower, the statement that timed out will be logged. A value of zero (the default) turns this off.<br>\u200b<br>The lock_timeout can be set for an individual session, so when adding the foreign key constraint we would instead set the lock_timeout on the connection we have open via:<\/em><\/p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-large\"><img loading=\"lazy\" width=\"1024\" height=\"76\" src=\"https:\/\/i2.wp.com\/joinhandshake.com\/wp-content\/uploads\/2021\/02\/Screen-Shot-2021-02-26-at-4.18.10-PM.png?resize=1024%2C76&#038;ssl=1\" alt=\"\" class=\"wp-image-7350\" srcset=\"https:\/\/i2.wp.com\/joinhandshake.com\/wp-content\/uploads\/2021\/02\/Screen-Shot-2021-02-26-at-4.18.10-PM.png?resize=1024%2C76&amp;ssl=1 1024w, https:\/\/i2.wp.com\/joinhandshake.com\/wp-content\/uploads\/2021\/02\/Screen-Shot-2021-02-26-at-4.18.10-PM.png?resize=300%2C22&amp;ssl=1 300w, https:\/\/i2.wp.com\/joinhandshake.com\/wp-content\/uploads\/2021\/02\/Screen-Shot-2021-02-26-at-4.18.10-PM.png?resize=768%2C57&amp;ssl=1 768w, https:\/\/i2.wp.com\/joinhandshake.com\/wp-content\/uploads\/2021\/02\/Screen-Shot-2021-02-26-at-4.18.10-PM.png?resize=1536%2C114&amp;ssl=1 1536w, https:\/\/i2.wp.com\/joinhandshake.com\/wp-content\/uploads\/2021\/02\/Screen-Shot-2021-02-26-at-4.18.10-PM.png?resize=2048%2C153&amp;ssl=1 2048w, https:\/\/i2.wp.com\/joinhandshake.com\/wp-content\/uploads\/2021\/02\/Screen-Shot-2021-02-26-at-4.18.10-PM.png?resize=640%2C48&amp;ssl=1 640w, https:\/\/i2.wp.com\/joinhandshake.com\/wp-content\/uploads\/2021\/02\/Screen-Shot-2021-02-26-at-4.18.10-PM.png?resize=1200%2C89&amp;ssl=1 1200w, https:\/\/i2.wp.com\/joinhandshake.com\/wp-content\/uploads\/2021\/02\/Screen-Shot-2021-02-26-at-4.18.10-PM.png?resize=1920%2C143&amp;ssl=1 1920w\" sizes=\"(max-width: 1000px) 100vw, 1000px\" data-recalc-dims=\"1\" \/><\/figure><\/div>\n\n\n\n<p>The other option is statement_timeout, which acts the same as lock_timeout but times out any statement (including lock requests.) In our instance statement_timeout could be set to something reasonable to abort long running queries in the first place.<\/p>\n\n\n\n<h3 id=\"Check-for-locks\">Check for locks<\/h3>\n\n\n\n<p>\u200bA way to check for any long held locks before running a migration that requires taking out an ACCESS EXCLUSIVE lock is querying directly against Postgres. At Handshake we&#8217;re big fans of the <a href=\"https:\/\/github.com\/heroku\/heroku-pg\" target=\"_blank\" rel=\"noreferrer noopener\">pg<\/a> and <a href=\"https:\/\/github.com\/heroku\/heroku-pg-extras\" target=\"_blank\" rel=\"noreferrer noopener\">pg-extras<\/a> plugins for the Heroku CLI. Using that you can check for long-held queries by running:<\/p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-large\"><img loading=\"lazy\" width=\"1024\" height=\"32\" src=\"https:\/\/i1.wp.com\/joinhandshake.com\/wp-content\/uploads\/2021\/02\/Screen-Shot-2021-02-26-at-4.19.42-PM.png?resize=1024%2C32&#038;ssl=1\" alt=\"\" class=\"wp-image-7353\" srcset=\"https:\/\/i1.wp.com\/joinhandshake.com\/wp-content\/uploads\/2021\/02\/Screen-Shot-2021-02-26-at-4.19.42-PM.png?resize=1024%2C32&amp;ssl=1 1024w, https:\/\/i1.wp.com\/joinhandshake.com\/wp-content\/uploads\/2021\/02\/Screen-Shot-2021-02-26-at-4.19.42-PM.png?resize=300%2C9&amp;ssl=1 300w, https:\/\/i1.wp.com\/joinhandshake.com\/wp-content\/uploads\/2021\/02\/Screen-Shot-2021-02-26-at-4.19.42-PM.png?resize=768%2C24&amp;ssl=1 768w, https:\/\/i1.wp.com\/joinhandshake.com\/wp-content\/uploads\/2021\/02\/Screen-Shot-2021-02-26-at-4.19.42-PM.png?resize=1536%2C48&amp;ssl=1 1536w, https:\/\/i1.wp.com\/joinhandshake.com\/wp-content\/uploads\/2021\/02\/Screen-Shot-2021-02-26-at-4.19.42-PM.png?resize=2048%2C64&amp;ssl=1 2048w, https:\/\/i1.wp.com\/joinhandshake.com\/wp-content\/uploads\/2021\/02\/Screen-Shot-2021-02-26-at-4.19.42-PM.png?resize=640%2C20&amp;ssl=1 640w, https:\/\/i1.wp.com\/joinhandshake.com\/wp-content\/uploads\/2021\/02\/Screen-Shot-2021-02-26-at-4.19.42-PM.png?resize=1200%2C38&amp;ssl=1 1200w, https:\/\/i1.wp.com\/joinhandshake.com\/wp-content\/uploads\/2021\/02\/Screen-Shot-2021-02-26-at-4.19.42-PM.png?resize=1920%2C60&amp;ssl=1 1920w\" sizes=\"(max-width: 1000px) 100vw, 1000px\" data-recalc-dims=\"1\" \/><\/figure><\/div>\n\n\n\n<p>\u200bIt should be noted that using the pg:locks command in the Heroku CLI wouldn&#8217;t have worked in this case since that query is restricted to only <a href=\"https:\/\/github.com\/heroku\/heroku-pg-extras\/blob\/v1.0.10\/commands\/locks.js#L32\" target=\"_blank\" rel=\"noreferrer noopener\">exclusive locks<\/a>. You can instead run this query snippet which shows the longest 10 held locks in your database, regardless of lock type:<\/p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-large\"><img loading=\"lazy\" width=\"1024\" height=\"297\" src=\"https:\/\/i2.wp.com\/joinhandshake.com\/wp-content\/uploads\/2021\/02\/Screen-Shot-2021-02-26-at-4.19.58-PM.png?resize=1024%2C297&#038;ssl=1\" alt=\"\" class=\"wp-image-7355\" srcset=\"https:\/\/i2.wp.com\/joinhandshake.com\/wp-content\/uploads\/2021\/02\/Screen-Shot-2021-02-26-at-4.19.58-PM.png?resize=1024%2C297&amp;ssl=1 1024w, https:\/\/i2.wp.com\/joinhandshake.com\/wp-content\/uploads\/2021\/02\/Screen-Shot-2021-02-26-at-4.19.58-PM.png?resize=300%2C87&amp;ssl=1 300w, https:\/\/i2.wp.com\/joinhandshake.com\/wp-content\/uploads\/2021\/02\/Screen-Shot-2021-02-26-at-4.19.58-PM.png?resize=768%2C223&amp;ssl=1 768w, https:\/\/i2.wp.com\/joinhandshake.com\/wp-content\/uploads\/2021\/02\/Screen-Shot-2021-02-26-at-4.19.58-PM.png?resize=1536%2C446&amp;ssl=1 1536w, https:\/\/i2.wp.com\/joinhandshake.com\/wp-content\/uploads\/2021\/02\/Screen-Shot-2021-02-26-at-4.19.58-PM.png?resize=2048%2C594&amp;ssl=1 2048w, https:\/\/i2.wp.com\/joinhandshake.com\/wp-content\/uploads\/2021\/02\/Screen-Shot-2021-02-26-at-4.19.58-PM.png?resize=640%2C186&amp;ssl=1 640w, https:\/\/i2.wp.com\/joinhandshake.com\/wp-content\/uploads\/2021\/02\/Screen-Shot-2021-02-26-at-4.19.58-PM.png?resize=1200%2C348&amp;ssl=1 1200w, https:\/\/i2.wp.com\/joinhandshake.com\/wp-content\/uploads\/2021\/02\/Screen-Shot-2021-02-26-at-4.19.58-PM.png?resize=1920%2C557&amp;ssl=1 1920w\" sizes=\"(max-width: 1000px) 100vw, 1000px\" data-recalc-dims=\"1\" \/><\/figure><\/div>\n\n\n\n<p>Running a simple check to make sure no long held locks are open in your database would be a good idea before running migrations that require a high degree of locking (pretty much anything that adds a constraint).<\/p>\n\n\n\n<h3 id=\"ALTER-TABLE-NOT-VALID\">ALTER TABLE NOT VALID<\/h3>\n\n\n\n<p>\u200bAn additional precaution that could be employed for this specific scenario is changing the foreign key constraint to be added with NOT VALID.<\/p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-large\"><img loading=\"lazy\" width=\"1024\" height=\"164\" src=\"https:\/\/i2.wp.com\/joinhandshake.com\/wp-content\/uploads\/2021\/02\/Screen-Shot-2021-02-26-at-4.21.19-PM.png?resize=1024%2C164&#038;ssl=1\" alt=\"\" class=\"wp-image-7356\" srcset=\"https:\/\/i2.wp.com\/joinhandshake.com\/wp-content\/uploads\/2021\/02\/Screen-Shot-2021-02-26-at-4.21.19-PM.png?resize=1024%2C164&amp;ssl=1 1024w, https:\/\/i2.wp.com\/joinhandshake.com\/wp-content\/uploads\/2021\/02\/Screen-Shot-2021-02-26-at-4.21.19-PM.png?resize=300%2C48&amp;ssl=1 300w, https:\/\/i2.wp.com\/joinhandshake.com\/wp-content\/uploads\/2021\/02\/Screen-Shot-2021-02-26-at-4.21.19-PM.png?resize=768%2C123&amp;ssl=1 768w, https:\/\/i2.wp.com\/joinhandshake.com\/wp-content\/uploads\/2021\/02\/Screen-Shot-2021-02-26-at-4.21.19-PM.png?resize=1536%2C247&amp;ssl=1 1536w, https:\/\/i2.wp.com\/joinhandshake.com\/wp-content\/uploads\/2021\/02\/Screen-Shot-2021-02-26-at-4.21.19-PM.png?resize=2048%2C329&amp;ssl=1 2048w, https:\/\/i2.wp.com\/joinhandshake.com\/wp-content\/uploads\/2021\/02\/Screen-Shot-2021-02-26-at-4.21.19-PM.png?resize=640%2C103&amp;ssl=1 640w, https:\/\/i2.wp.com\/joinhandshake.com\/wp-content\/uploads\/2021\/02\/Screen-Shot-2021-02-26-at-4.21.19-PM.png?resize=1200%2C193&amp;ssl=1 1200w, https:\/\/i2.wp.com\/joinhandshake.com\/wp-content\/uploads\/2021\/02\/Screen-Shot-2021-02-26-at-4.21.19-PM.png?resize=1920%2C308&amp;ssl=1 1920w\" sizes=\"(max-width: 1000px) 100vw, 1000px\" data-recalc-dims=\"1\" \/><\/figure><\/div>\n\n\n\n<p>When NOT VALID is added to the foreign key constraint <a href=\"https:\/\/www.postgresql.org\/docs\/9.4\/static\/sql-altertable.html\" target=\"_blank\" rel=\"noreferrer noopener\">&#8220;the potentially-lengthy initial check to verify that all rows in the table satisfy the constraint is skipped.&#8221;<\/a> That means no EXCLUSIVE ACCESS lock is taken out on the table you&#8217;re referencing.<\/p>\n\n\n\n<h2 id=\"Conclusion\">Conclusion<\/h2>\n\n\n\n<p>\u200bMany Postgres migrations, like adding new columns, can be quite cheap and safe to do in production. But as we&#8217;ve seen here, adding constraints requires a higher degree of caution due to the more restrictive locks that need to be taken out. While blocking reads on the users table were certainly surprising to us for such a simple migration, the post-mortem taught us more about the internals of Postgres, and we&#8217;ve fixed many parts of our procedures to prevent such an issue from happening again.<br>\u200b<br>If these types of problems interest you I invite you to apply to one of our <a href=\"https:\/\/boards.greenhouse.io\/joinhandshake\/\" target=\"_blank\" rel=\"noreferrer noopener\">Engineering Roles<\/a>!<\/p>\n\n\n\n<p><\/p>\n\n\n\n<p><em>Photo by&nbsp;<a href=\"https:\/\/www.pexels.com\/@cottonbro?utm_content=attributionCopyText&amp;utm_medium=referral&amp;utm_source=pexels\" target=\"_blank\" rel=\"noreferrer noopener\">cottonbro<\/a>&nbsp;from&nbsp;<a href=\"https:\/\/www.pexels.com\/photo\/man-reclining-and-looking-at-his-laptop-5483064\/?utm_content=attributionCopyText&amp;utm_medium=referral&amp;utm_source=pexels\" target=\"_blank\" rel=\"noreferrer noopener\">Pexels<\/a><\/em><\/p>\n","protected":false},"excerpt":{"rendered":"<p>Engineers Scott Ringwelski and Matt Hickman explore the challenges of Postgres migration.<\/p>\n","protected":false},"author":167034976,"featured_media":7359,"menu_order":0,"template":"","our_team_category":[1615],"our_team_tag":[1539,1648],"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v16.8 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>PostgreSQL and the Lock Queue | Handshake<\/title>\n<meta name=\"description\" content=\"In a postmortem reflection, engineers Scott Ringwelski and Matt Hickman explore the challenges of Postgres migration.\" \/>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/joinhandshake.com\/blog\/our-team\/postgresql-and-lock-queue\/\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"PostgreSQL and the Lock Queue | Handshake\" \/>\n<meta property=\"og:description\" content=\"In a postmortem reflection, engineers Scott Ringwelski and Matt Hickman explore the challenges of Postgres migration.\" \/>\n<meta property=\"og:url\" content=\"https:\/\/joinhandshake.com\/blog\/our-team\/postgresql-and-lock-queue\/\" \/>\n<meta property=\"og:site_name\" content=\"Handshake\" \/>\n<meta property=\"article:publisher\" content=\"https:\/\/www.facebook.com\/joinhandshake\" \/>\n<meta property=\"article:modified_time\" content=\"2021-02-27T00:47:22+00:00\" \/>\n<meta property=\"og:image\" content=\"https:\/\/i0.wp.com\/joinhandshake.com\/wp-content\/uploads\/2021\/02\/pexels-cottonbro-5483064.jpg?fit=6406%2C4271&#038;ssl=1\" \/>\n\t<meta property=\"og:image:width\" content=\"6406\" \/>\n\t<meta property=\"og:image:height\" content=\"4271\" \/>\n<meta name=\"twitter:card\" content=\"summary_large_image\" \/>\n<meta name=\"twitter:site\" content=\"@joinhandshake\" \/>\n<meta name=\"twitter:label1\" content=\"Est. reading time\" \/>\n\t<meta name=\"twitter:data1\" content=\"7 minutes\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"Organization\",\"@id\":\"https:\/\/joinhandshake.com\/#organization\",\"name\":\"Handshake\",\"url\":\"https:\/\/joinhandshake.com\/\",\"sameAs\":[\"https:\/\/www.facebook.com\/joinhandshake\",\"https:\/\/www.instagram.com\/joinhandshake\",\"https:\/\/www.linkedin.com\/company\/team-handshake\/\",\"https:\/\/twitter.com\/joinhandshake\"],\"logo\":{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/joinhandshake.com\/#logo\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/i1.wp.com\/joinhandshake.com\/wp-content\/uploads\/2019\/11\/handshake-share.png?fit=1200%2C628&ssl=1\",\"contentUrl\":\"https:\/\/i1.wp.com\/joinhandshake.com\/wp-content\/uploads\/2019\/11\/handshake-share.png?fit=1200%2C628&ssl=1\",\"width\":1200,\"height\":628,\"caption\":\"Handshake\"},\"image\":{\"@id\":\"https:\/\/joinhandshake.com\/#logo\"}},{\"@type\":\"WebSite\",\"@id\":\"https:\/\/joinhandshake.com\/#website\",\"url\":\"https:\/\/joinhandshake.com\/\",\"name\":\"Handshake\",\"description\":\"\",\"publisher\":{\"@id\":\"https:\/\/joinhandshake.com\/#organization\"},\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/joinhandshake.com\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"},{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/joinhandshake.com\/blog\/our-team\/postgresql-and-lock-queue\/#primaryimage\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/i0.wp.com\/joinhandshake.com\/wp-content\/uploads\/2021\/02\/pexels-cottonbro-5483064.jpg?fit=6406%2C4271&ssl=1\",\"contentUrl\":\"https:\/\/i0.wp.com\/joinhandshake.com\/wp-content\/uploads\/2021\/02\/pexels-cottonbro-5483064.jpg?fit=6406%2C4271&ssl=1\",\"width\":6406,\"height\":4271},{\"@type\":\"WebPage\",\"@id\":\"https:\/\/joinhandshake.com\/blog\/our-team\/postgresql-and-lock-queue\/#webpage\",\"url\":\"https:\/\/joinhandshake.com\/blog\/our-team\/postgresql-and-lock-queue\/\",\"name\":\"PostgreSQL and the Lock Queue | Handshake\",\"isPartOf\":{\"@id\":\"https:\/\/joinhandshake.com\/#website\"},\"primaryImageOfPage\":{\"@id\":\"https:\/\/joinhandshake.com\/blog\/our-team\/postgresql-and-lock-queue\/#primaryimage\"},\"datePublished\":\"2021-02-27T00:33:13+00:00\",\"dateModified\":\"2021-02-27T00:47:22+00:00\",\"description\":\"In a postmortem reflection, engineers Scott Ringwelski and Matt Hickman explore the challenges of Postgres migration.\",\"breadcrumb\":{\"@id\":\"https:\/\/joinhandshake.com\/blog\/our-team\/postgresql-and-lock-queue\/#breadcrumb\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/joinhandshake.com\/blog\/our-team\/postgresql-and-lock-queue\/\"]}]},{\"@type\":\"BreadcrumbList\",\"@id\":\"https:\/\/joinhandshake.com\/blog\/our-team\/postgresql-and-lock-queue\/#breadcrumb\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"name\":\"Home\",\"item\":\"https:\/\/joinhandshake.com\/\"},{\"@type\":\"ListItem\",\"position\":2,\"name\":\"PostgreSQL and the Lock Queue\"}]}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","yoast_head_json":{"title":"PostgreSQL and the Lock Queue | Handshake","description":"In a postmortem reflection, engineers Scott Ringwelski and Matt Hickman explore the challenges of Postgres migration.","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/joinhandshake.com\/blog\/our-team\/postgresql-and-lock-queue\/","og_locale":"en_US","og_type":"article","og_title":"PostgreSQL and the Lock Queue | Handshake","og_description":"In a postmortem reflection, engineers Scott Ringwelski and Matt Hickman explore the challenges of Postgres migration.","og_url":"https:\/\/joinhandshake.com\/blog\/our-team\/postgresql-and-lock-queue\/","og_site_name":"Handshake","article_publisher":"https:\/\/www.facebook.com\/joinhandshake","article_modified_time":"2021-02-27T00:47:22+00:00","og_image":[{"width":6406,"height":4271,"url":"https:\/\/i0.wp.com\/joinhandshake.com\/wp-content\/uploads\/2021\/02\/pexels-cottonbro-5483064.jpg?fit=6406%2C4271&ssl=1","path":"\/srv\/htdocs\/wp-content\/uploads\/2021\/02\/pexels-cottonbro-5483064.jpg","size":"full","id":7359,"alt":"","pixels":27360026,"type":"image\/jpeg"}],"twitter_card":"summary_large_image","twitter_site":"@joinhandshake","twitter_misc":{"Est. reading time":"7 minutes"},"schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"Organization","@id":"https:\/\/joinhandshake.com\/#organization","name":"Handshake","url":"https:\/\/joinhandshake.com\/","sameAs":["https:\/\/www.facebook.com\/joinhandshake","https:\/\/www.instagram.com\/joinhandshake","https:\/\/www.linkedin.com\/company\/team-handshake\/","https:\/\/twitter.com\/joinhandshake"],"logo":{"@type":"ImageObject","@id":"https:\/\/joinhandshake.com\/#logo","inLanguage":"en-US","url":"https:\/\/i1.wp.com\/joinhandshake.com\/wp-content\/uploads\/2019\/11\/handshake-share.png?fit=1200%2C628&ssl=1","contentUrl":"https:\/\/i1.wp.com\/joinhandshake.com\/wp-content\/uploads\/2019\/11\/handshake-share.png?fit=1200%2C628&ssl=1","width":1200,"height":628,"caption":"Handshake"},"image":{"@id":"https:\/\/joinhandshake.com\/#logo"}},{"@type":"WebSite","@id":"https:\/\/joinhandshake.com\/#website","url":"https:\/\/joinhandshake.com\/","name":"Handshake","description":"","publisher":{"@id":"https:\/\/joinhandshake.com\/#organization"},"potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/joinhandshake.com\/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"},{"@type":"ImageObject","@id":"https:\/\/joinhandshake.com\/blog\/our-team\/postgresql-and-lock-queue\/#primaryimage","inLanguage":"en-US","url":"https:\/\/i0.wp.com\/joinhandshake.com\/wp-content\/uploads\/2021\/02\/pexels-cottonbro-5483064.jpg?fit=6406%2C4271&ssl=1","contentUrl":"https:\/\/i0.wp.com\/joinhandshake.com\/wp-content\/uploads\/2021\/02\/pexels-cottonbro-5483064.jpg?fit=6406%2C4271&ssl=1","width":6406,"height":4271},{"@type":"WebPage","@id":"https:\/\/joinhandshake.com\/blog\/our-team\/postgresql-and-lock-queue\/#webpage","url":"https:\/\/joinhandshake.com\/blog\/our-team\/postgresql-and-lock-queue\/","name":"PostgreSQL and the Lock Queue | Handshake","isPartOf":{"@id":"https:\/\/joinhandshake.com\/#website"},"primaryImageOfPage":{"@id":"https:\/\/joinhandshake.com\/blog\/our-team\/postgresql-and-lock-queue\/#primaryimage"},"datePublished":"2021-02-27T00:33:13+00:00","dateModified":"2021-02-27T00:47:22+00:00","description":"In a postmortem reflection, engineers Scott Ringwelski and Matt Hickman explore the challenges of Postgres migration.","breadcrumb":{"@id":"https:\/\/joinhandshake.com\/blog\/our-team\/postgresql-and-lock-queue\/#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/joinhandshake.com\/blog\/our-team\/postgresql-and-lock-queue\/"]}]},{"@type":"BreadcrumbList","@id":"https:\/\/joinhandshake.com\/blog\/our-team\/postgresql-and-lock-queue\/#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Home","item":"https:\/\/joinhandshake.com\/"},{"@type":"ListItem","position":2,"name":"PostgreSQL and the Lock Queue"}]}]}},"jetpack_sharing_enabled":true,"_links":{"self":[{"href":"https:\/\/joinhandshake.com\/wp-json\/wp\/v2\/our-team\/7345"}],"collection":[{"href":"https:\/\/joinhandshake.com\/wp-json\/wp\/v2\/our-team"}],"about":[{"href":"https:\/\/joinhandshake.com\/wp-json\/wp\/v2\/types\/our-team"}],"author":[{"embeddable":true,"href":"https:\/\/joinhandshake.com\/wp-json\/wp\/v2\/users\/167034976"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/joinhandshake.com\/wp-json\/wp\/v2\/media\/7359"}],"wp:attachment":[{"href":"https:\/\/joinhandshake.com\/wp-json\/wp\/v2\/media?parent=7345"}],"wp:term":[{"taxonomy":"our_team_category","embeddable":true,"href":"https:\/\/joinhandshake.com\/wp-json\/wp\/v2\/our_team_category?post=7345"},{"taxonomy":"our_team_tag","embeddable":true,"href":"https:\/\/joinhandshake.com\/wp-json\/wp\/v2\/our_team_tag?post=7345"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}