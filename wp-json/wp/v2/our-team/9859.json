{"id":9859,"date":"2021-07-26T12:59:55","date_gmt":"2021-07-26T19:59:55","guid":{"rendered":"https:\/\/joinhandshake.com\/?post_type=our-team&#038;p=9859"},"modified":"2021-07-26T12:59:59","modified_gmt":"2021-07-26T19:59:59","slug":"graphql-tutorial","status":"publish","type":"our-team","link":"https:\/\/joinhandshake.com\/blog\/our-team\/graphql-tutorial\/","title":{"rendered":"GraphQL Tutorial: Handling Aggregations with GraphQL Ruby"},"content":{"rendered":"\n<p>GraphQL is great for straightforward CRUD operations, but it can be tricky when implementing non-standard queries. For example, handling operations that aren\u2019t querying for a field on a GraphQL object that corresponds to a column on a database table. Aggregation is one of those cases where it\u2019s not immediately obvious as to how to translate a relatively easy task in an ORM in a REST API to GraphQL. You can add a field to a model for the aggregation, but that has the risk of N+1 queries if you\u2019re querying for multiple objects.<\/p>\n\n\n\n<p><\/p>\n\n\n\n<p>The first time we had a need for aggregation in GraphQL was to add a field containing a count to one of our GraphQL objects. On Handshake, students can leave reviews for jobs they\u2019ve worked at, and we want to aggregate all of those reviews to show a count of how many there are for each employer. This will be used in a view where multiple employers are returned at once, so we also had to avoid making N+1 queries for the reviews. <\/p>\n\n\n\n<h4>Sounds simple enough, right?<\/h4>\n\n\n\n<p>Fortunately, there actually is a simple approach using <a href=\"https:\/\/graphql-ruby.org\/schema\/lazy_execution\" target=\"_blank\" rel=\"noreferrer noopener\">Lazy Execution<\/a> in GraphQL Ruby combined with the <a href=\"https:\/\/github.com\/exAspArk\/batch-loader\">BatchLoader gem<\/a> (Or one of the other gems that does the same thing.) The BatchLoader prevents N+1 queries from being made for the reviews for each employer, and returns an object back to GraphQL Ruby that can be lazily resolved.<\/p>\n\n\n\n<p>This approach is applicable when you\u2019re specifically trying to avoid making N+1 queries. If that\u2019s not a concern, you can skip all of this and make the query directly with ActiveRecord as with any other field on a GraphQL object.<\/p>\n\n\n\n<p><\/p>\n\n\n\n<h2>How it\u2019s done <\/h2>\n\n\n\n<p>The first step is to create a new BatchLoader subclass:<\/p>\n\n\n\n<figure class=\"wp-block-embed is-type-rich is-provider-embed-handler wp-block-embed-embed-handler\"><div class=\"wp-block-embed__wrapper\">\n<style>.gist table { margin-bottom: 0; }<\/style><div style=\"tab-size: 8\" id=\"gist110267847\" class=\"gist\">\n    <div class=\"gist-file\" translate=\"no\">\n      <div class=\"gist-data\">\n        <div class=\"js-gist-file-update-container js-task-list-container file-box\">\n  <div id=\"file-17_1-rb\" class=\"file my-2\">\n    \n  <div itemprop=\"text\" class=\"Box-body p-0 blob-wrapper data type-ruby  \">\n\n      \n<div >\n  \n  <table class=\"highlight tab-size js-file-line-container\" data-tab-size=\"8\" data-paste-markdown-skip>\n        <tr>\n          <td id=\"file-17_1-rb-L1\" class=\"blob-num js-line-number\" data-line-number=\"1\"><\/td>\n          <td id=\"file-17_1-rb-LC1\" class=\"blob-code blob-code-inner js-file-line\"><span class=pl-en>require<\/span> <span class=pl-s>&quot;batch-loader&quot;<\/span><\/td>\n        <\/tr>\n        <tr>\n          <td id=\"file-17_1-rb-L2\" class=\"blob-num js-line-number\" data-line-number=\"2\"><\/td>\n          <td id=\"file-17_1-rb-LC2\" class=\"blob-code blob-code-inner js-file-line\">\n<\/td>\n        <\/tr>\n        <tr>\n          <td id=\"file-17_1-rb-L3\" class=\"blob-num js-line-number\" data-line-number=\"3\"><\/td>\n          <td id=\"file-17_1-rb-LC3\" class=\"blob-code blob-code-inner js-file-line\"><span class=pl-k>class<\/span> <span class=pl-v>SizeBatchLoader<\/span> &lt; <span class=pl-v>BatchLoader<\/span>::<span class=pl-v>GraphQL<\/span><\/td>\n        <\/tr>\n        <tr>\n          <td id=\"file-17_1-rb-L4\" class=\"blob-num js-line-number\" data-line-number=\"4\"><\/td>\n          <td id=\"file-17_1-rb-LC4\" class=\"blob-code blob-code-inner js-file-line\">  <span class=pl-k>def<\/span> <span class=pl-en>sync<\/span><\/td>\n        <\/tr>\n        <tr>\n          <td id=\"file-17_1-rb-L5\" class=\"blob-num js-line-number\" data-line-number=\"5\"><\/td>\n          <td id=\"file-17_1-rb-LC5\" class=\"blob-code blob-code-inner js-file-line\">    <span class=pl-c># The sync method in the superclass will return an ActiveRecord Relation with all of the objects that have been queried for &#8211; all this has class has to do is get the number of those objects<\/span><\/td>\n        <\/tr>\n        <tr>\n          <td id=\"file-17_1-rb-L6\" class=\"blob-num js-line-number\" data-line-number=\"6\"><\/td>\n          <td id=\"file-17_1-rb-LC6\" class=\"blob-code blob-code-inner js-file-line\">    <span class=pl-smi>super<\/span><span class=pl-kos>.<\/span><span class=pl-en>size<\/span> <\/td>\n        <\/tr>\n        <tr>\n          <td id=\"file-17_1-rb-L7\" class=\"blob-num js-line-number\" data-line-number=\"7\"><\/td>\n          <td id=\"file-17_1-rb-LC7\" class=\"blob-code blob-code-inner js-file-line\">  <span class=pl-k>end<\/span><\/td>\n        <\/tr>\n        <tr>\n          <td id=\"file-17_1-rb-L8\" class=\"blob-num js-line-number\" data-line-number=\"8\"><\/td>\n          <td id=\"file-17_1-rb-LC8\" class=\"blob-code blob-code-inner js-file-line\"><span class=pl-k>end<\/span><\/td>\n        <\/tr>\n  <\/table>\n<\/div>\n\n\n  <\/div>\n\n  <\/div>\n<\/div>\n\n      <\/div>\n      <div class=\"gist-meta\">\n        <a href=\"https:\/\/gist.github.com\/handshake-engineering-blog\/846d28a3ea0616686183d9b5c2bc710e\/raw\/c9ff43e201704353a8151ec4b0fa1a0cea8a3e44\/17_1.rb\" style=\"float:right\">view raw<\/a>\n        <a href=\"https:\/\/gist.github.com\/handshake-engineering-blog\/846d28a3ea0616686183d9b5c2bc710e#file-17_1-rb\">\n          17_1.rb\n        <\/a>\n        hosted with &#10084; by <a href=\"https:\/\/github.com\">GitHub<\/a>\n      <\/div>\n    <\/div>\n<\/div>\n\n<\/div><\/figure>\n\n\n\n<p><\/p>\n\n\n\n<p><\/p>\n\n\n\n<p>The file can be anywhere in your GraphQL project. Then, add this line into your GraphQL Schema class to tell GraphQL Ruby that when a SizeBatchLoader object is returned, it should be lazily resolved by calling its sync method:<\/p>\n\n\n\n<p><\/p>\n\n\n\n<figure class=\"wp-block-embed is-type-rich is-provider-embed-handler wp-block-embed-embed-handler\"><div class=\"wp-block-embed__wrapper\">\n<style>.gist table { margin-bottom: 0; }<\/style><div style=\"tab-size: 8\" id=\"gist110267867\" class=\"gist\">\n    <div class=\"gist-file\" translate=\"no\">\n      <div class=\"gist-data\">\n        <div class=\"js-gist-file-update-container js-task-list-container file-box\">\n  <div id=\"file-17_2-rb\" class=\"file my-2\">\n    \n  <div itemprop=\"text\" class=\"Box-body p-0 blob-wrapper data type-ruby  \">\n\n      \n<div >\n  \n  <table class=\"highlight tab-size js-file-line-container\" data-tab-size=\"8\" data-paste-markdown-skip>\n        <tr>\n          <td id=\"file-17_2-rb-L1\" class=\"blob-num js-line-number\" data-line-number=\"1\"><\/td>\n          <td id=\"file-17_2-rb-LC1\" class=\"blob-code blob-code-inner js-file-line\"><span class=pl-en>lazy_resolve<\/span><span class=pl-kos>(<\/span><span class=pl-v>CountBatchLoader<\/span><span class=pl-kos>,<\/span> <span class=pl-pds>:sync<\/span><span class=pl-kos>)<\/span><\/td>\n        <\/tr>\n  <\/table>\n<\/div>\n\n\n  <\/div>\n\n  <\/div>\n<\/div>\n\n      <\/div>\n      <div class=\"gist-meta\">\n        <a href=\"https:\/\/gist.github.com\/handshake-engineering-blog\/d995af903c51bdfd5bffe278a3a8bc1d\/raw\/2cc348cc07f7aa2e210c00486d1166a6e621dfcb\/17_2.rb\" style=\"float:right\">view raw<\/a>\n        <a href=\"https:\/\/gist.github.com\/handshake-engineering-blog\/d995af903c51bdfd5bffe278a3a8bc1d#file-17_2-rb\">\n          17_2.rb\n        <\/a>\n        hosted with &#10084; by <a href=\"https:\/\/github.com\">GitHub<\/a>\n      <\/div>\n    <\/div>\n<\/div>\n\n<\/div><\/figure>\n\n\n\n<p><\/p>\n\n\n\n<p>The last step is to use the new BatchLoader subclass in the field on a GraphQL object where it\u2019s required. If you\u2019re already familiar with how the BatchLoader is used, this won\u2019t be very different. Our reviews are stored in a JobReview model with the only relevant column for this case being employer_id. This is what we&#8217;ll be using the BatchLoader to query for in this example:<\/p>\n\n\n\n<p><\/p>\n\n\n\n<figure class=\"wp-block-embed is-type-rich is-provider-embed-handler wp-block-embed-embed-handler\"><div class=\"wp-block-embed__wrapper\">\n<style>.gist table { margin-bottom: 0; }<\/style><div style=\"tab-size: 8\" id=\"gist110267869\" class=\"gist\">\n    <div class=\"gist-file\" translate=\"no\">\n      <div class=\"gist-data\">\n        <div class=\"js-gist-file-update-container js-task-list-container file-box\">\n  <div id=\"file-17_3-rb\" class=\"file my-2\">\n    \n  <div itemprop=\"text\" class=\"Box-body p-0 blob-wrapper data type-ruby  \">\n\n      \n<div >\n  \n  <table class=\"highlight tab-size js-file-line-container\" data-tab-size=\"8\" data-paste-markdown-skip>\n        <tr>\n          <td id=\"file-17_3-rb-L1\" class=\"blob-num js-line-number\" data-line-number=\"1\"><\/td>\n          <td id=\"file-17_3-rb-LC1\" class=\"blob-code blob-code-inner js-file-line\"><span class=pl-k>def<\/span> <span class=pl-en>job_reviews_count<\/span><\/td>\n        <\/tr>\n        <tr>\n          <td id=\"file-17_3-rb-L2\" class=\"blob-num js-line-number\" data-line-number=\"2\"><\/td>\n          <td id=\"file-17_3-rb-LC2\" class=\"blob-code blob-code-inner js-file-line\">  <span class=pl-v>SizeBatchLoader<\/span><span class=pl-kos>.<\/span><span class=pl-en>for<\/span><span class=pl-kos>(<\/span><span class=pl-en>object<\/span><span class=pl-kos>[<\/span><span class=pl-pds>:id<\/span><span class=pl-kos>]<\/span><span class=pl-kos>)<\/span><span class=pl-kos>.<\/span><span class=pl-en>batch<\/span> <span class=pl-k>do<\/span> |<span class=pl-s1>employer_ids<\/span><span class=pl-kos>,<\/span> <span class=pl-s1>loader<\/span>|<\/td>\n        <\/tr>\n        <tr>\n          <td id=\"file-17_3-rb-L3\" class=\"blob-num js-line-number\" data-line-number=\"3\"><\/td>\n          <td id=\"file-17_3-rb-LC3\" class=\"blob-code blob-code-inner js-file-line\">    <span class=pl-c># Query for all of the JobReviews for the employers we need, and only select the one column that will be used<\/span><\/td>\n        <\/tr>\n        <tr>\n          <td id=\"file-17_3-rb-L4\" class=\"blob-num js-line-number\" data-line-number=\"4\"><\/td>\n          <td id=\"file-17_3-rb-LC4\" class=\"blob-code blob-code-inner js-file-line\">    <span class=pl-s1>job_reviews<\/span> <span class=pl-c1>=<\/span> <span class=pl-v>JobReview<\/span><span class=pl-kos>.<\/span><span class=pl-en>select<\/span><span class=pl-kos>(<\/span><span class=pl-pds>:employer_id<\/span><span class=pl-kos>)<\/span><span class=pl-kos>.<\/span><span class=pl-en>where<\/span><span class=pl-kos>(<\/span><span class=pl-pds>employer_id<\/span>: <span class=pl-s1>employer_ids<\/span><span class=pl-kos>)<\/span><\/td>\n        <\/tr>\n        <tr>\n          <td id=\"file-17_3-rb-L5\" class=\"blob-num js-line-number\" data-line-number=\"5\"><\/td>\n          <td id=\"file-17_3-rb-LC5\" class=\"blob-code blob-code-inner js-file-line\">    <span class=pl-s1>employer_ids<\/span><span class=pl-kos>.<\/span><span class=pl-en>each<\/span> <span class=pl-k>do<\/span> |<span class=pl-s1>employer_id<\/span>|<\/td>\n        <\/tr>\n        <tr>\n          <td id=\"file-17_3-rb-L6\" class=\"blob-num js-line-number\" data-line-number=\"6\"><\/td>\n          <td id=\"file-17_3-rb-LC6\" class=\"blob-code blob-code-inner js-file-line\">      <span class=pl-c># Filter the full set of results for each employer. This is what will be passed to the sync method in the new BatchLoader we created.<\/span><\/td>\n        <\/tr>\n        <tr>\n          <td id=\"file-17_3-rb-L7\" class=\"blob-num js-line-number\" data-line-number=\"7\"><\/td>\n          <td id=\"file-17_3-rb-LC7\" class=\"blob-code blob-code-inner js-file-line\">      <span class=pl-s1>loader<\/span><span class=pl-kos>.<\/span><span class=pl-en>call<\/span><span class=pl-kos>(<\/span><span class=pl-s1>employer_id<\/span><span class=pl-kos>,<\/span> <span class=pl-s1>job_reviews<\/span><span class=pl-kos>.<\/span><span class=pl-en>filter<\/span> <span class=pl-kos>{<\/span> |<span class=pl-s1>job_review<\/span>| <span class=pl-s1>job_review<\/span><span class=pl-kos>.<\/span><span class=pl-s1>employer_id<\/span> == <span class=pl-s1>employer_id<\/span> <span class=pl-kos>}<\/span><span class=pl-kos>)<\/span><\/td>\n        <\/tr>\n        <tr>\n          <td id=\"file-17_3-rb-L8\" class=\"blob-num js-line-number\" data-line-number=\"8\"><\/td>\n          <td id=\"file-17_3-rb-LC8\" class=\"blob-code blob-code-inner js-file-line\">    <span class=pl-k>end<\/span><\/td>\n        <\/tr>\n        <tr>\n          <td id=\"file-17_3-rb-L9\" class=\"blob-num js-line-number\" data-line-number=\"9\"><\/td>\n          <td id=\"file-17_3-rb-LC9\" class=\"blob-code blob-code-inner js-file-line\">  <span class=pl-k>end<\/span><\/td>\n        <\/tr>\n        <tr>\n          <td id=\"file-17_3-rb-L10\" class=\"blob-num js-line-number\" data-line-number=\"10\"><\/td>\n          <td id=\"file-17_3-rb-LC10\" class=\"blob-code blob-code-inner js-file-line\"><span class=pl-k>end<\/span><\/td>\n        <\/tr>\n  <\/table>\n<\/div>\n\n\n  <\/div>\n\n  <\/div>\n<\/div>\n\n      <\/div>\n      <div class=\"gist-meta\">\n        <a href=\"https:\/\/gist.github.com\/handshake-engineering-blog\/31f8d80dfa46993d589c374710bdede1\/raw\/5ea17892311505dc9b2cdcb848dd4b5d71a6df1e\/17_3.rb\" style=\"float:right\">view raw<\/a>\n        <a href=\"https:\/\/gist.github.com\/handshake-engineering-blog\/31f8d80dfa46993d589c374710bdede1#file-17_3-rb\">\n          17_3.rb\n        <\/a>\n        hosted with &#10084; by <a href=\"https:\/\/github.com\">GitHub<\/a>\n      <\/div>\n    <\/div>\n<\/div>\n\n<\/div><\/figure>\n\n\n\n<p><\/p>\n\n\n\n<p><\/p>\n\n\n\n<h3>This approach isn\u2019t without its downsides. <\/h3>\n\n\n\n<p>You may have noticed that we\u2019re calling size on the result in our BatchLoader subclass and not count; this is because we can\u2019t use a COUNT query in the database if we want to also avoid N+1 queries. We have to load all of the results into memory from a single query to count them using the BatchLoader. <\/p>\n\n\n\n<p><\/p>\n\n\n\n<h4>This is a classic tradeoff between time complexity versus space complexity. <\/h4>\n\n\n\n<p>In our case, the maximum number of reviews for any one employer is going to be in the thousands, and we\u2019re only selecting a single Integer column from the database. It\u2019s a reasonable amount of memory usage and outweighs the cost of having to perform a separate query to count the reviews for each employer.<\/p>\n\n\n\n<p><\/p>\n\n\n\n<p><\/p>\n\n\n\n<p>Photo by <a href=\"https:\/\/unsplash.com\/@cgower?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">Christopher Gower<\/a> on <a href=\"https:\/\/unsplash.com\/?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">Unsplash<\/a><\/p>\n","protected":false},"excerpt":{"rendered":"<p>Pierre Marris, Software Engineer in the Student Relationships team, shows us how to handle aggregations with GraphQL Ruby.<\/p>\n","protected":false},"author":167034990,"featured_media":9869,"menu_order":0,"template":"","our_team_category":[1615],"our_team_tag":[1701,1539,1692,1700,1648],"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v16.8 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>GraphQL Tutorial: Handling Aggregations with GraphQL Ruby | Handshake<\/title>\n<meta name=\"description\" content=\"Have you ever struggled with handling aggregations with GraphQL Ruby? Find out how our software engineering team faced this challenge.\" \/>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/joinhandshake.com\/blog\/our-team\/graphql-tutorial\/\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"GraphQL Tutorial: Handling Aggregations with GraphQL Ruby | Handshake\" \/>\n<meta property=\"og:description\" content=\"Have you ever struggled with handling aggregations with GraphQL Ruby? Find out how our software engineering team faced this challenge.\" \/>\n<meta property=\"og:url\" content=\"https:\/\/joinhandshake.com\/blog\/our-team\/graphql-tutorial\/\" \/>\n<meta property=\"og:site_name\" content=\"Handshake\" \/>\n<meta property=\"article:publisher\" content=\"https:\/\/www.facebook.com\/joinhandshake\" \/>\n<meta property=\"article:modified_time\" content=\"2021-07-26T19:59:59+00:00\" \/>\n<meta property=\"og:image\" content=\"https:\/\/joinhandshake.com\/wp-content\/uploads\/2021\/07\/christopher-gower-m_HRfLhgABo-unsplash.jpg\" \/>\n\t<meta property=\"og:image:width\" content=\"640\" \/>\n\t<meta property=\"og:image:height\" content=\"426\" \/>\n<meta name=\"twitter:card\" content=\"summary_large_image\" \/>\n<meta name=\"twitter:site\" content=\"@joinhandshake\" \/>\n<meta name=\"twitter:label1\" content=\"Est. reading time\" \/>\n\t<meta name=\"twitter:data1\" content=\"3 minutes\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"Organization\",\"@id\":\"https:\/\/joinhandshake.com\/#organization\",\"name\":\"Handshake\",\"url\":\"https:\/\/joinhandshake.com\/\",\"sameAs\":[\"https:\/\/www.facebook.com\/joinhandshake\",\"https:\/\/www.instagram.com\/joinhandshake\",\"https:\/\/www.linkedin.com\/company\/team-handshake\/\",\"https:\/\/twitter.com\/joinhandshake\"],\"logo\":{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/joinhandshake.com\/#logo\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/i1.wp.com\/joinhandshake.com\/wp-content\/uploads\/2019\/11\/handshake-share.png?fit=1200%2C628&ssl=1\",\"contentUrl\":\"https:\/\/i1.wp.com\/joinhandshake.com\/wp-content\/uploads\/2019\/11\/handshake-share.png?fit=1200%2C628&ssl=1\",\"width\":1200,\"height\":628,\"caption\":\"Handshake\"},\"image\":{\"@id\":\"https:\/\/joinhandshake.com\/#logo\"}},{\"@type\":\"WebSite\",\"@id\":\"https:\/\/joinhandshake.com\/#website\",\"url\":\"https:\/\/joinhandshake.com\/\",\"name\":\"Handshake\",\"description\":\"\",\"publisher\":{\"@id\":\"https:\/\/joinhandshake.com\/#organization\"},\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/joinhandshake.com\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"},{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/joinhandshake.com\/blog\/our-team\/graphql-tutorial\/#primaryimage\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/i1.wp.com\/joinhandshake.com\/wp-content\/uploads\/2021\/07\/christopher-gower-m_HRfLhgABo-unsplash.jpg?fit=640%2C426&ssl=1\",\"contentUrl\":\"https:\/\/i1.wp.com\/joinhandshake.com\/wp-content\/uploads\/2021\/07\/christopher-gower-m_HRfLhgABo-unsplash.jpg?fit=640%2C426&ssl=1\",\"width\":640,\"height\":426},{\"@type\":\"WebPage\",\"@id\":\"https:\/\/joinhandshake.com\/blog\/our-team\/graphql-tutorial\/#webpage\",\"url\":\"https:\/\/joinhandshake.com\/blog\/our-team\/graphql-tutorial\/\",\"name\":\"GraphQL Tutorial: Handling Aggregations with GraphQL Ruby | Handshake\",\"isPartOf\":{\"@id\":\"https:\/\/joinhandshake.com\/#website\"},\"primaryImageOfPage\":{\"@id\":\"https:\/\/joinhandshake.com\/blog\/our-team\/graphql-tutorial\/#primaryimage\"},\"datePublished\":\"2021-07-26T19:59:55+00:00\",\"dateModified\":\"2021-07-26T19:59:59+00:00\",\"description\":\"Have you ever struggled with handling aggregations with GraphQL Ruby? Find out how our software engineering team faced this challenge.\",\"breadcrumb\":{\"@id\":\"https:\/\/joinhandshake.com\/blog\/our-team\/graphql-tutorial\/#breadcrumb\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/joinhandshake.com\/blog\/our-team\/graphql-tutorial\/\"]}]},{\"@type\":\"BreadcrumbList\",\"@id\":\"https:\/\/joinhandshake.com\/blog\/our-team\/graphql-tutorial\/#breadcrumb\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"name\":\"Home\",\"item\":\"https:\/\/joinhandshake.com\/\"},{\"@type\":\"ListItem\",\"position\":2,\"name\":\"GraphQL Tutorial: Handling Aggregations with GraphQL Ruby\"}]}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","yoast_head_json":{"title":"GraphQL Tutorial: Handling Aggregations with GraphQL Ruby | Handshake","description":"Have you ever struggled with handling aggregations with GraphQL Ruby? Find out how our software engineering team faced this challenge.","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/joinhandshake.com\/blog\/our-team\/graphql-tutorial\/","og_locale":"en_US","og_type":"article","og_title":"GraphQL Tutorial: Handling Aggregations with GraphQL Ruby | Handshake","og_description":"Have you ever struggled with handling aggregations with GraphQL Ruby? Find out how our software engineering team faced this challenge.","og_url":"https:\/\/joinhandshake.com\/blog\/our-team\/graphql-tutorial\/","og_site_name":"Handshake","article_publisher":"https:\/\/www.facebook.com\/joinhandshake","article_modified_time":"2021-07-26T19:59:59+00:00","og_image":[{"width":640,"height":426,"url":"https:\/\/joinhandshake.com\/wp-content\/uploads\/2021\/07\/christopher-gower-m_HRfLhgABo-unsplash.jpg","path":"\/srv\/htdocs\/wp-content\/uploads\/2021\/07\/christopher-gower-m_HRfLhgABo-unsplash.jpg","size":"full","id":9869,"alt":"","pixels":272640,"type":"image\/jpeg"}],"twitter_card":"summary_large_image","twitter_site":"@joinhandshake","twitter_misc":{"Est. reading time":"3 minutes"},"schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"Organization","@id":"https:\/\/joinhandshake.com\/#organization","name":"Handshake","url":"https:\/\/joinhandshake.com\/","sameAs":["https:\/\/www.facebook.com\/joinhandshake","https:\/\/www.instagram.com\/joinhandshake","https:\/\/www.linkedin.com\/company\/team-handshake\/","https:\/\/twitter.com\/joinhandshake"],"logo":{"@type":"ImageObject","@id":"https:\/\/joinhandshake.com\/#logo","inLanguage":"en-US","url":"https:\/\/i1.wp.com\/joinhandshake.com\/wp-content\/uploads\/2019\/11\/handshake-share.png?fit=1200%2C628&ssl=1","contentUrl":"https:\/\/i1.wp.com\/joinhandshake.com\/wp-content\/uploads\/2019\/11\/handshake-share.png?fit=1200%2C628&ssl=1","width":1200,"height":628,"caption":"Handshake"},"image":{"@id":"https:\/\/joinhandshake.com\/#logo"}},{"@type":"WebSite","@id":"https:\/\/joinhandshake.com\/#website","url":"https:\/\/joinhandshake.com\/","name":"Handshake","description":"","publisher":{"@id":"https:\/\/joinhandshake.com\/#organization"},"potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/joinhandshake.com\/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"},{"@type":"ImageObject","@id":"https:\/\/joinhandshake.com\/blog\/our-team\/graphql-tutorial\/#primaryimage","inLanguage":"en-US","url":"https:\/\/i1.wp.com\/joinhandshake.com\/wp-content\/uploads\/2021\/07\/christopher-gower-m_HRfLhgABo-unsplash.jpg?fit=640%2C426&ssl=1","contentUrl":"https:\/\/i1.wp.com\/joinhandshake.com\/wp-content\/uploads\/2021\/07\/christopher-gower-m_HRfLhgABo-unsplash.jpg?fit=640%2C426&ssl=1","width":640,"height":426},{"@type":"WebPage","@id":"https:\/\/joinhandshake.com\/blog\/our-team\/graphql-tutorial\/#webpage","url":"https:\/\/joinhandshake.com\/blog\/our-team\/graphql-tutorial\/","name":"GraphQL Tutorial: Handling Aggregations with GraphQL Ruby | Handshake","isPartOf":{"@id":"https:\/\/joinhandshake.com\/#website"},"primaryImageOfPage":{"@id":"https:\/\/joinhandshake.com\/blog\/our-team\/graphql-tutorial\/#primaryimage"},"datePublished":"2021-07-26T19:59:55+00:00","dateModified":"2021-07-26T19:59:59+00:00","description":"Have you ever struggled with handling aggregations with GraphQL Ruby? Find out how our software engineering team faced this challenge.","breadcrumb":{"@id":"https:\/\/joinhandshake.com\/blog\/our-team\/graphql-tutorial\/#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/joinhandshake.com\/blog\/our-team\/graphql-tutorial\/"]}]},{"@type":"BreadcrumbList","@id":"https:\/\/joinhandshake.com\/blog\/our-team\/graphql-tutorial\/#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Home","item":"https:\/\/joinhandshake.com\/"},{"@type":"ListItem","position":2,"name":"GraphQL Tutorial: Handling Aggregations with GraphQL Ruby"}]}]}},"jetpack_sharing_enabled":true,"_links":{"self":[{"href":"https:\/\/joinhandshake.com\/wp-json\/wp\/v2\/our-team\/9859"}],"collection":[{"href":"https:\/\/joinhandshake.com\/wp-json\/wp\/v2\/our-team"}],"about":[{"href":"https:\/\/joinhandshake.com\/wp-json\/wp\/v2\/types\/our-team"}],"author":[{"embeddable":true,"href":"https:\/\/joinhandshake.com\/wp-json\/wp\/v2\/users\/167034990"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/joinhandshake.com\/wp-json\/wp\/v2\/media\/9869"}],"wp:attachment":[{"href":"https:\/\/joinhandshake.com\/wp-json\/wp\/v2\/media?parent=9859"}],"wp:term":[{"taxonomy":"our_team_category","embeddable":true,"href":"https:\/\/joinhandshake.com\/wp-json\/wp\/v2\/our_team_category?post=9859"},{"taxonomy":"our_team_tag","embeddable":true,"href":"https:\/\/joinhandshake.com\/wp-json\/wp\/v2\/our_team_tag?post=9859"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}