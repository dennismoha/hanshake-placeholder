{"id":7336,"date":"2021-02-26T16:14:42","date_gmt":"2021-02-27T00:14:42","guid":{"rendered":"https:\/\/joinhandshake.com\/?post_type=our-team&#038;p=7336"},"modified":"2021-02-26T16:46:14","modified_gmt":"2021-02-27T00:46:14","slug":"continuous-code-shipping","status":"publish","type":"our-team","link":"https:\/\/joinhandshake.com\/blog\/our-team\/continuous-code-shipping\/","title":{"rendered":"How We Ship Code Continuously at Handshake"},"content":{"rendered":"\n<p><em><strong>Editor&#8217;s note:<\/strong> This article was originally published in November 2017, and was re-posted in February 2021.<\/em><\/p>\n\n\n\n<p>We\u2019ve previously written about our journey towards practicing continuous delivery. Today, we\u2019ll be taking a closer look at the strategies and challenges of shipping code continuously.<br>\u200b<br>During Handshake\u2019s earlier years, we used to deploy to production once-per-week. Like many engineering teams around our size, we faced the dreaded weekly feature freeze: we merged everything to master and let a week\u2019s worth of changes accumulate. Then, once a week on Tuesday afternoons we critique, QA, and release everything at once. Since we had a weekly release cadence, it wasn\u2019t surprising for everyone to merge their changes in at the last hour, otherwise engineers would have to wait a week to deploy again. This created a lot of anxiety around each deployment.<br>\u200b<br>Once our latest changes were deployed it was common for unexpected errors to arise on production. Our automated test suite would fail to cover edge cases bugs found by our customers on production. Since we often deployed the week\u2019s worth of changes in the evening\u200a\u2014\u200ato minimize customer impact\u200a\u2014\u200awe had trouble identifying which change caused the problem.<br>\u200b<br>The main reason we took this approach is because we felt it was important to minimize disruption to our customers during the day. Handshake is the primary tool that our customers rely on for their full-time jobs. Unexpected changes in behavior, or showstopper bugs in the middle of the day are unacceptable.<\/p>\n\n\n\n<h3 id=\"Continuous-Delivery\">Continuous delivery<\/h3>\n\n\n\n<p>\u200b<br>We knew we wanted to achieve continuous delivery, but we also knew we had a few obstacles to overcome before we could get there: First, we needed to separate deployments from feature releases through feature toggles. Our test suite had to remain reliable and fast. Deployments had to be fully automated. We needed to improve observability in order to surface where and when issues came up. And finally, we needed to coordinate deployments across the team.<\/p>\n\n\n\n<h3 id=\"Don\u2019t-Surprise-Our-Customers\">Don\u2019t surprise our customers<\/h3>\n\n\n\n<p>\u200b<br>Handshake is a critical piece of software which our customers rely on every day. Universities use Handshake to operate their career centers with activities like running career fairs, organizing campus interviews, scheduling appointments with advisors, and managing employer relations. And of course, employers and students rely on us for those same functionalities and more.<br>\u200b<br>As it was clear to us that deployments should not change features for every customer on our platform, we began to develop feature toggle infrastructure. Early on we adopted open source libraries such as <a href=\"https:\/\/github.com\/fetlife\/rollout\" target=\"_blank\" rel=\"noreferrer noopener\">rollout<\/a>. This worked well initially, but as we scaled two main problems surfaced.<br>\u200b<br>First, the open source solutions we evaluated didn\u2019t have an easy to use, non-technical interface to change the rollout parameters. This made it hard to product managers and designers to change the parameters of a rollout without going through an engineer. Engineers needed to ssh into a production node to make the changes. Second, we needed a more performant solution. All open source solutions we found made constant network calls to the caching tier, and on pages with lots of toggles that added up quickly.<br>\u200b<br>To solve these problems we landed on <a href=\"https:\/\/launchdarkly.com\/\" target=\"_blank\" rel=\"noreferrer noopener\">LaunchDarkly<\/a>. In addition to nice features like assigning features to users, and both A\/B and multivariate testing, LaunchDarkly provides a great user interface for managing features and rollouts. Their RubyGem also keeps network performance in mind, by caching toggle states locally.<\/p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-large\"><img loading=\"lazy\" width=\"800\" height=\"342\" src=\"https:\/\/i0.wp.com\/joinhandshake.com\/wp-content\/uploads\/2021\/02\/1.png?resize=800%2C342&#038;ssl=1\" alt=\"\" class=\"wp-image-7341\" srcset=\"https:\/\/i0.wp.com\/joinhandshake.com\/wp-content\/uploads\/2021\/02\/1.png?w=800&amp;ssl=1 800w, https:\/\/i0.wp.com\/joinhandshake.com\/wp-content\/uploads\/2021\/02\/1.png?resize=300%2C128&amp;ssl=1 300w, https:\/\/i0.wp.com\/joinhandshake.com\/wp-content\/uploads\/2021\/02\/1.png?resize=768%2C328&amp;ssl=1 768w, https:\/\/i0.wp.com\/joinhandshake.com\/wp-content\/uploads\/2021\/02\/1.png?resize=640%2C274&amp;ssl=1 640w\" sizes=\"(max-width: 800px) 100vw, 800px\" data-recalc-dims=\"1\" \/><\/figure><\/div>\n\n\n\n<p><br>Metrics from a feature toggle enabling a new job recommendations model which shows nearly double engagement.<br>\u200b<br>With some added developer tooling on top of LaunchDarkly, using feature toggles quickly became easy and delightful to use while also fundamentally changing the way we build features. Rather than big, feature-complete Pull Requests we can build new features piece by piece behind a feature toggle with small, easy to review Pull Requests.<br>\u200b<br>In addition, once the feature is complete we can roll out to only a percentage of beta users first and watch for errors, feedback, and metrics to see the impact the change made.<\/p>\n\n\n\n<h3 id=\"Robust-test-suite\">Robust test suite<\/h3>\n\n\n\n<p>\u200bIf we\u2019re going to deploy throughout the day, we can\u2019t have any service interruptions during those deploys. Response time should be consistent and downtime non-existent during deploys. There were a few steps we took to guarantee smooth deploys.<br>\u200b<br>In our experience database migrations during deploys have been one of the main contributors to downtime or elevated error rates. One of the most positive impacts on preventing database migration issues for us has been adopting <a href=\"https:\/\/github.com\/ankane\/strong_migrations\" target=\"_blank\" rel=\"noreferrer noopener\">strong_migrations<\/a>. Put simply, we decouple database schema changes from the code changes that rely on that change. If the User model needs a new field, we\u2019ll stage the changes into two commits. The first commit adds the column using a Rails migration. Once that completes, we\u2019ll deploy a second commit containing code which uses the new column.<br>\u200b<\/p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-large\"><img loading=\"lazy\" width=\"713\" height=\"302\" src=\"https:\/\/i1.wp.com\/joinhandshake.com\/wp-content\/uploads\/2021\/02\/2.png?resize=713%2C302&#038;ssl=1\" alt=\"\" class=\"wp-image-7342\" srcset=\"https:\/\/i1.wp.com\/joinhandshake.com\/wp-content\/uploads\/2021\/02\/2.png?w=713&amp;ssl=1 713w, https:\/\/i1.wp.com\/joinhandshake.com\/wp-content\/uploads\/2021\/02\/2.png?resize=300%2C127&amp;ssl=1 300w, https:\/\/i1.wp.com\/joinhandshake.com\/wp-content\/uploads\/2021\/02\/2.png?resize=640%2C271&amp;ssl=1 640w\" sizes=\"(max-width: 713px) 100vw, 713px\" data-recalc-dims=\"1\" \/><\/figure><\/div>\n\n\n\n<p>Continuous delivery requires one-click deploys. Although we had one-click (or, at least, one console command) from early on we are happy to have adopted <a href=\"https:\/\/github.com\/Shopify\/shipit-engine\" target=\"_blank\" rel=\"noreferrer noopener\">Shipit-engine<\/a> from Shopify. \u201cShipit\u201d has given us a few key functionalities.<br>\u200b<br>One of those improvements are deployment coordinations. Before we started using Shipit, it would have been possible for two people to deploy from their local machine at the same time. This was unlikely early on with only a few engineers, but as the engineering team grew that was no longer the case. Shipit informs us when someone else is doing a deploy or even when they are <em>planning<\/em> to do a deploy. We do this both through UI indicators and with Slack integrations to our #deployments channel. The ability to coordinate deploys prevents any issues with double deploys.<br>\u200b<br>Using a Web UI to coordinate deploys also gives us better visibility into what our deployment behavior looks like. At a glance we can see what is undeployed in master, what the previous deployment timeline looks like, and deployment logs. With first class GitHub integrations, we can also see whether or not the build has passed for each commit in master, what the diff for the deploy is, and who authored the change.<br>\u200b<\/p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-large\"><img loading=\"lazy\" width=\"786\" height=\"197\" src=\"https:\/\/i0.wp.com\/joinhandshake.com\/wp-content\/uploads\/2021\/02\/3.png?resize=786%2C197&#038;ssl=1\" alt=\"\" class=\"wp-image-7343\" srcset=\"https:\/\/i0.wp.com\/joinhandshake.com\/wp-content\/uploads\/2021\/02\/3.png?w=786&amp;ssl=1 786w, https:\/\/i0.wp.com\/joinhandshake.com\/wp-content\/uploads\/2021\/02\/3.png?resize=300%2C75&amp;ssl=1 300w, https:\/\/i0.wp.com\/joinhandshake.com\/wp-content\/uploads\/2021\/02\/3.png?resize=768%2C192&amp;ssl=1 768w, https:\/\/i0.wp.com\/joinhandshake.com\/wp-content\/uploads\/2021\/02\/3.png?resize=640%2C160&amp;ssl=1 640w\" sizes=\"(max-width: 786px) 100vw, 786px\" data-recalc-dims=\"1\" \/><\/figure><\/div>\n\n\n\n<p><br>A glance at our deployer app on a deployment page. From here we can view the status of commits, deployment timeline, and the deployment logs.<br>\u200b<br>We also can make programmatic additions on top of our deployment app. For example, we are working towards being able to lock deployments (a feature also on the web UI), initiate deploys, and log deployment progress all in Slack.<\/p>\n\n\n\n<h3 id=\"Team-Coordination\">Team coordination<\/h3>\n\n\n\n<p>\u200b<br>Moving from weekly deploys to multiple per day to continuous requires a mindshift from the whole team. It fundamentally changes the way our company thinks about shipping features. And, especially in engineering, how features are written. There is no longer a weekly race to get your full features merged\u200a\u2014\u200athe process now calls for small incremental improvements safely guarded behind feature flags.<\/p>\n\n\n\n<h3 id=\"Observability\">Observability<\/h3>\n\n\n\n<p>\u200b<br>With the once-per-week deployment process, our primary defense against bugs was prevention. Once everything was merged we did heavy manual QA (in addition to our automated tests) which often took a long time to cover every change.<br>\u200b<br>With continuous delivery, we have more focus on clear identification of issues through our monitoring tools, and ensuring any change with an issue can be turned off with feature toggles. In order to easily identify and therefore resolve bugs we ensure that all changes have metrics associated with them.<br>\u200b<br>The primary tools we use for observability are Datadog, Bugsnag and Pagerduty. These tools have given us fine-grained details on various metrics and the details we need to quickly fix issues. We also set up alerting on thresholds crossed (such as background job queue size), metrics missing (heartbeats), or large average values (database load spikes). When issues do arise, we are quickly alerted and can be begin investigating within minutes.<br>\u200b<br>We plan to write further on the observability stack at Handshake. In summary: in the rare case a bug slips through our automated tests, it is very short lived.<\/p>\n\n\n\n<h3 id=\"What\u2019s-Next?\">What\u2019s next?<\/h3>\n\n\n\n<p>\u200b<br>It\u2019s been more than eight months since we adopted continuous delivery. The high-level results so far:<\/p>\n\n\n\n<ul><li>Smoother deploys\u200a\u2014\u200awe rarely see increased error rates and response time stays relatively the same.<\/li><li>Code reviews are smaller, more focused, and faster to review.<\/li><li>Our automated test suite remains reliable and fast, partly due to its importance in continuous delivery.<\/li><li>Engineers are able to ship their changes to production quickly and reliably.<br>\u200b<br>We\u2019re currently exploring the move from Continuous Delivery to Continuous Deployment. Instead of one-click deployments, we\u2019d like to automatically stage and deploy changes as soon as the build passes. Make sure to watch for a follow up post after our transition and for more detailed posts in each of these topics!<\/li><\/ul>\n\n\n\n<p><em>Photo by&nbsp;<a href=\"https:\/\/www.pexels.com\/@markusspiske?utm_content=attributionCopyText&amp;utm_medium=referral&amp;utm_source=pexels\" target=\"_blank\" rel=\"noreferrer noopener\">Markus Spiske<\/a>&nbsp;from&nbsp;<a href=\"https:\/\/www.pexels.com\/photo\/coding-script-965345\/?utm_content=attributionCopyText&amp;utm_medium=referral&amp;utm_source=pexels\" target=\"_blank\" rel=\"noreferrer noopener\">Pexels<\/a><\/em><\/p>\n","protected":false},"excerpt":{"rendered":"<p>Engineer Scott Ringwelski takes a closer look at the strategies and challenges of shipping code continuously.<\/p>\n","protected":false},"author":167034976,"featured_media":7340,"menu_order":0,"template":"","our_team_category":[1615],"our_team_tag":[1539,1648],"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v16.8 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>How We Ship Code Continuously at Handshake | Handshake<\/title>\n<meta name=\"description\" content=\"Handshake engineer Scott Ringwelski takes a closer look at the strategies and challenges of shipping code continuously.\" \/>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/joinhandshake.com\/blog\/our-team\/continuous-code-shipping\/\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"How We Ship Code Continuously at Handshake | Handshake\" \/>\n<meta property=\"og:description\" content=\"Handshake engineer Scott Ringwelski takes a closer look at the strategies and challenges of shipping code continuously.\" \/>\n<meta property=\"og:url\" content=\"https:\/\/joinhandshake.com\/blog\/our-team\/continuous-code-shipping\/\" \/>\n<meta property=\"og:site_name\" content=\"Handshake\" \/>\n<meta property=\"article:publisher\" content=\"https:\/\/www.facebook.com\/joinhandshake\" \/>\n<meta property=\"article:modified_time\" content=\"2021-02-27T00:46:14+00:00\" \/>\n<meta property=\"og:image\" content=\"https:\/\/i2.wp.com\/joinhandshake.com\/wp-content\/uploads\/2021\/05\/HS_Web_Sharing-Cover.jpg?fit=1801%2C946&#038;ssl=1\" \/>\n\t<meta property=\"og:image:width\" content=\"1801\" \/>\n\t<meta property=\"og:image:height\" content=\"946\" \/>\n<meta name=\"twitter:card\" content=\"summary_large_image\" \/>\n<meta name=\"twitter:site\" content=\"@joinhandshake\" \/>\n<meta name=\"twitter:label1\" content=\"Est. reading time\" \/>\n\t<meta name=\"twitter:data1\" content=\"8 minutes\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"Organization\",\"@id\":\"https:\/\/joinhandshake.com\/#organization\",\"name\":\"Handshake\",\"url\":\"https:\/\/joinhandshake.com\/\",\"sameAs\":[\"https:\/\/www.facebook.com\/joinhandshake\",\"https:\/\/www.instagram.com\/joinhandshake\",\"https:\/\/www.linkedin.com\/company\/team-handshake\/\",\"https:\/\/twitter.com\/joinhandshake\"],\"logo\":{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/joinhandshake.com\/#logo\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/i1.wp.com\/joinhandshake.com\/wp-content\/uploads\/2019\/11\/handshake-share.png?fit=1200%2C628&ssl=1\",\"contentUrl\":\"https:\/\/i1.wp.com\/joinhandshake.com\/wp-content\/uploads\/2019\/11\/handshake-share.png?fit=1200%2C628&ssl=1\",\"width\":1200,\"height\":628,\"caption\":\"Handshake\"},\"image\":{\"@id\":\"https:\/\/joinhandshake.com\/#logo\"}},{\"@type\":\"WebSite\",\"@id\":\"https:\/\/joinhandshake.com\/#website\",\"url\":\"https:\/\/joinhandshake.com\/\",\"name\":\"Handshake\",\"description\":\"\",\"publisher\":{\"@id\":\"https:\/\/joinhandshake.com\/#organization\"},\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/joinhandshake.com\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"},{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/joinhandshake.com\/blog\/our-team\/continuous-code-shipping\/#primaryimage\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/i0.wp.com\/joinhandshake.com\/wp-content\/uploads\/2021\/02\/pexels-markus-spiske-965345.jpg?fit=5688%2C3713&ssl=1\",\"contentUrl\":\"https:\/\/i0.wp.com\/joinhandshake.com\/wp-content\/uploads\/2021\/02\/pexels-markus-spiske-965345.jpg?fit=5688%2C3713&ssl=1\",\"width\":5688,\"height\":3713},{\"@type\":\"WebPage\",\"@id\":\"https:\/\/joinhandshake.com\/blog\/our-team\/continuous-code-shipping\/#webpage\",\"url\":\"https:\/\/joinhandshake.com\/blog\/our-team\/continuous-code-shipping\/\",\"name\":\"How We Ship Code Continuously at Handshake | Handshake\",\"isPartOf\":{\"@id\":\"https:\/\/joinhandshake.com\/#website\"},\"primaryImageOfPage\":{\"@id\":\"https:\/\/joinhandshake.com\/blog\/our-team\/continuous-code-shipping\/#primaryimage\"},\"datePublished\":\"2021-02-27T00:14:42+00:00\",\"dateModified\":\"2021-02-27T00:46:14+00:00\",\"description\":\"Handshake engineer Scott Ringwelski takes a closer look at the strategies and challenges of shipping code continuously.\",\"breadcrumb\":{\"@id\":\"https:\/\/joinhandshake.com\/blog\/our-team\/continuous-code-shipping\/#breadcrumb\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/joinhandshake.com\/blog\/our-team\/continuous-code-shipping\/\"]}]},{\"@type\":\"BreadcrumbList\",\"@id\":\"https:\/\/joinhandshake.com\/blog\/our-team\/continuous-code-shipping\/#breadcrumb\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"name\":\"Home\",\"item\":\"https:\/\/joinhandshake.com\/\"},{\"@type\":\"ListItem\",\"position\":2,\"name\":\"How We Ship Code Continuously at Handshake\"}]}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","yoast_head_json":{"title":"How We Ship Code Continuously at Handshake | Handshake","description":"Handshake engineer Scott Ringwelski takes a closer look at the strategies and challenges of shipping code continuously.","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/joinhandshake.com\/blog\/our-team\/continuous-code-shipping\/","og_locale":"en_US","og_type":"article","og_title":"How We Ship Code Continuously at Handshake | Handshake","og_description":"Handshake engineer Scott Ringwelski takes a closer look at the strategies and challenges of shipping code continuously.","og_url":"https:\/\/joinhandshake.com\/blog\/our-team\/continuous-code-shipping\/","og_site_name":"Handshake","article_publisher":"https:\/\/www.facebook.com\/joinhandshake","article_modified_time":"2021-02-27T00:46:14+00:00","og_image":[{"width":1801,"height":946,"url":"https:\/\/i2.wp.com\/joinhandshake.com\/wp-content\/uploads\/2021\/05\/HS_Web_Sharing-Cover.jpg?fit=1801%2C946&ssl=1","path":"\/srv\/htdocs\/wp-content\/uploads\/2021\/05\/HS_Web_Sharing-Cover.jpg","size":"full","id":9282,"alt":"","pixels":1703746,"type":"image\/jpeg"}],"twitter_card":"summary_large_image","twitter_site":"@joinhandshake","twitter_misc":{"Est. reading time":"8 minutes"},"schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"Organization","@id":"https:\/\/joinhandshake.com\/#organization","name":"Handshake","url":"https:\/\/joinhandshake.com\/","sameAs":["https:\/\/www.facebook.com\/joinhandshake","https:\/\/www.instagram.com\/joinhandshake","https:\/\/www.linkedin.com\/company\/team-handshake\/","https:\/\/twitter.com\/joinhandshake"],"logo":{"@type":"ImageObject","@id":"https:\/\/joinhandshake.com\/#logo","inLanguage":"en-US","url":"https:\/\/i1.wp.com\/joinhandshake.com\/wp-content\/uploads\/2019\/11\/handshake-share.png?fit=1200%2C628&ssl=1","contentUrl":"https:\/\/i1.wp.com\/joinhandshake.com\/wp-content\/uploads\/2019\/11\/handshake-share.png?fit=1200%2C628&ssl=1","width":1200,"height":628,"caption":"Handshake"},"image":{"@id":"https:\/\/joinhandshake.com\/#logo"}},{"@type":"WebSite","@id":"https:\/\/joinhandshake.com\/#website","url":"https:\/\/joinhandshake.com\/","name":"Handshake","description":"","publisher":{"@id":"https:\/\/joinhandshake.com\/#organization"},"potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/joinhandshake.com\/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"},{"@type":"ImageObject","@id":"https:\/\/joinhandshake.com\/blog\/our-team\/continuous-code-shipping\/#primaryimage","inLanguage":"en-US","url":"https:\/\/i0.wp.com\/joinhandshake.com\/wp-content\/uploads\/2021\/02\/pexels-markus-spiske-965345.jpg?fit=5688%2C3713&ssl=1","contentUrl":"https:\/\/i0.wp.com\/joinhandshake.com\/wp-content\/uploads\/2021\/02\/pexels-markus-spiske-965345.jpg?fit=5688%2C3713&ssl=1","width":5688,"height":3713},{"@type":"WebPage","@id":"https:\/\/joinhandshake.com\/blog\/our-team\/continuous-code-shipping\/#webpage","url":"https:\/\/joinhandshake.com\/blog\/our-team\/continuous-code-shipping\/","name":"How We Ship Code Continuously at Handshake | Handshake","isPartOf":{"@id":"https:\/\/joinhandshake.com\/#website"},"primaryImageOfPage":{"@id":"https:\/\/joinhandshake.com\/blog\/our-team\/continuous-code-shipping\/#primaryimage"},"datePublished":"2021-02-27T00:14:42+00:00","dateModified":"2021-02-27T00:46:14+00:00","description":"Handshake engineer Scott Ringwelski takes a closer look at the strategies and challenges of shipping code continuously.","breadcrumb":{"@id":"https:\/\/joinhandshake.com\/blog\/our-team\/continuous-code-shipping\/#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/joinhandshake.com\/blog\/our-team\/continuous-code-shipping\/"]}]},{"@type":"BreadcrumbList","@id":"https:\/\/joinhandshake.com\/blog\/our-team\/continuous-code-shipping\/#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Home","item":"https:\/\/joinhandshake.com\/"},{"@type":"ListItem","position":2,"name":"How We Ship Code Continuously at Handshake"}]}]}},"jetpack_sharing_enabled":true,"_links":{"self":[{"href":"https:\/\/joinhandshake.com\/wp-json\/wp\/v2\/our-team\/7336"}],"collection":[{"href":"https:\/\/joinhandshake.com\/wp-json\/wp\/v2\/our-team"}],"about":[{"href":"https:\/\/joinhandshake.com\/wp-json\/wp\/v2\/types\/our-team"}],"author":[{"embeddable":true,"href":"https:\/\/joinhandshake.com\/wp-json\/wp\/v2\/users\/167034976"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/joinhandshake.com\/wp-json\/wp\/v2\/media\/7340"}],"wp:attachment":[{"href":"https:\/\/joinhandshake.com\/wp-json\/wp\/v2\/media?parent=7336"}],"wp:term":[{"taxonomy":"our_team_category","embeddable":true,"href":"https:\/\/joinhandshake.com\/wp-json\/wp\/v2\/our_team_category?post=7336"},{"taxonomy":"our_team_tag","embeddable":true,"href":"https:\/\/joinhandshake.com\/wp-json\/wp\/v2\/our_team_tag?post=7336"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}