{"id":9376,"date":"2021-05-26T15:39:32","date_gmt":"2021-05-26T22:39:32","guid":{"rendered":"https:\/\/joinhandshake.com\/?post_type=our-team&#038;p=9376"},"modified":"2021-05-26T15:39:34","modified_gmt":"2021-05-26T22:39:34","slug":"how-to-make-major-changes-to-your-user-table","status":"publish","type":"our-team","link":"https:\/\/joinhandshake.com\/blog\/our-team\/how-to-make-major-changes-to-your-user-table\/","title":{"rendered":"How to Make Major Changes to Your User Table Without Breaking the World"},"content":{"rendered":"\n<p>A while back, I was sent a design mockup which included a rather inconspicuous change to the user settings page. In place of the single \u201cemail address\u201d field, you could now enter multiple emails, and designate one of them as primary. I immediately started raising questions to see if this was a hard requirement, because I knew that it was going to be <em>way<\/em> more work than anyone outside of engineering probably assumed it would be.<\/p>\n\n\n\n<h2 id=\"What\u2019s-the-Big-Deal?\">What\u2019s the Big Deal?<\/h2>\n\n\n\n<p>This change would need to involve replacing our email_address column on the users table with something that could support multiple values. That, in itself, is pretty straightforward:<\/p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"1024\" height=\"367\" src=\"https:\/\/i0.wp.com\/joinhandshake.com\/wp-content\/uploads\/2021\/05\/ebc5cddd-3df7-4e2a-9106-9d94286908e3.png?resize=1024%2C367&#038;ssl=1\" alt=\"\" class=\"wp-image-9377\" srcset=\"https:\/\/i0.wp.com\/joinhandshake.com\/wp-content\/uploads\/2021\/05\/ebc5cddd-3df7-4e2a-9106-9d94286908e3.png?resize=1024%2C367&amp;ssl=1 1024w, https:\/\/i0.wp.com\/joinhandshake.com\/wp-content\/uploads\/2021\/05\/ebc5cddd-3df7-4e2a-9106-9d94286908e3.png?resize=300%2C107&amp;ssl=1 300w, https:\/\/i0.wp.com\/joinhandshake.com\/wp-content\/uploads\/2021\/05\/ebc5cddd-3df7-4e2a-9106-9d94286908e3.png?resize=768%2C275&amp;ssl=1 768w, https:\/\/i0.wp.com\/joinhandshake.com\/wp-content\/uploads\/2021\/05\/ebc5cddd-3df7-4e2a-9106-9d94286908e3.png?w=1094&amp;ssl=1 1094w\" sizes=\"(max-width: 1000px) 100vw, 1000px\" data-recalc-dims=\"1\" \/><\/figure>\n\n\n\n<p>What makes it considerably more complicated is that we need to make this change in a way that doesn\u2019t require any downtime (or freezing of updates to emails, which happen pretty much constantly when you have millions of users), and could be rolled back at any point (in case of mistakes). <\/p>\n\n\n\n<p><\/p>\n\n\n\n<h4>Those requirements make it a fairly involved, multi-step process:<\/h4>\n\n\n\n<ol><li>Create the new database structure.<\/li><li>Set up write forwarding, so that changes to the old structure get copied over to the new one, and vice-versa. This ensures that at any point in the process, we can revert any\/all of our changes, and users won\u2019t see any data suddenly change back to a previous value.<\/li><li>Copy over all values from the old data structure into the new one.<\/li><li>Update all code which reads this data to read from the new structure.<\/li><li>Update all code which writes this data to write to the new structure.<\/li><li>Tear down write forwarding and drop the old data.<\/li><li>Now you can make whatever user-facing changes you wanted to make.<\/li><\/ol>\n\n\n\n<p>This is already complex enough that it\u2019s worth double-checking with PM and Design to make sure that this change is important enough to spend a nontrivial amount of time on it. But as long as that\u2019s confirmed, this is a drill we\u2019re familiar with; we\u2019ll make some Jira issues for it and slot it into some upcoming sprints.<\/p>\n\n\n\n<p>But this email thing was so much more than just that. I thought for sure that once people understood what was required, they\u2019d never want to spend that much dev time on what looks like such a small change to user settings.<\/p>\n\n\n\n<h4>Some selected reasons that this change was going to be big:<\/h4>\n\n\n\n<ul><li>In Handshake, a user\u2019s email isn\u2019t just a piece of contact info. It\u2019s also the mechanism we use to verify their affiliation with an organization. This makes it much easier to maintain a network which is almost entirely free of scammers and spam bots.<ul><li>Students need to use an email that their educational institution tells us belongs to an enrolled student.<\/li><li>Recruiters need to use their work email, which verifies they work at that company.<\/li><\/ul><\/li><li>Because the id of a Handshake user doesn\u2019t really mean anything to anyone, emails are used in a bunch of user workflows where you need to look up another user.<\/li><li>Email is often used to figure out whether a Handshake user is the same person as a user in some external system.<\/li><\/ul>\n\n\n\n<p><br>The list could go on in a lot more detail, but I\u2019d summarize most of it as \u201cemail is sometimes used as an identifier.\u201d So changes to it have to be managed very carefully, and there\u2019s a ton of complex business logic where it isn\u2019t immediately obvious what the actual requirements and assumptions are regarding emails.<\/p>\n\n\n\n<h4>On top of the complex business logic, there are huge logistical challenges:<\/h4>\n\n\n\n<ul><li>If you do a search for email_address across the Handshake codebase, you\u2019ll find literally thousands of references.<\/li><li>We have multiple other database tables that also have an email_address column. Those don\u2019t need to be changed, but it\u2019s going to be a lot of work to even go through the list and determine which of those email_addresses are actually referring to the column on the users table.<\/li><li>We use Ruby, and one of that language\u2019s downsides is that it\u2019s difficult to automatically find all references to one specific method, when there are other methods with the same name.<sup>1<\/sup><\/li><li>It\u2019s not just the thousands of <em>current<\/em> references to email_address that we\u2019ll have to deal with; there\u2019s also new references being added all the time, by engineers across the whole company.<\/li><\/ul>\n\n\n\n<p>This all adds up to steps 4 and 5 from the outline above lasting for a very, very long time. When I was asked to put an estimate on that,<sup>2<\/sup> I think my pseudo-scientific guess added up to something like 30 engineer-weeks. After some discussion, the decision was made that this was worth that much investment,<sup>3<\/sup> so we put it on the roadmap. There were some\u2026 interruptions&#8230; that happened in 2020, so it ended up actually taking about a year.<\/p>\n\n\n\n<h2 id=\"Making-it-Happen\">Making it Happen<\/h2>\n\n\n\n<p>In principle, the plan was the same as what I outlined above for any database structure change. But because of the additional considerations for this specific case, we had to be a lot more specific about some of the details up front.<\/p>\n\n\n\n<p>First, one thing that we decided against: we were not going to override the email_address method on the User class, and have it return a value from the new user_email_addresses table. That would have saved a <em>ton<\/em> of time tediously going over every reference to email_address and updating it to use the new structure, but the problem is that there\u2019s no single answer to <em>which<\/em> email address should be returned, if a user can now have multiple. If we\u2019re using the email address to actually, well, send an email, we want to use the address that the user has selected as primary. But if it\u2019s one of those use cases where the email is more like an identifier string, we need to use the same email we\u2019ve always used for that user. This is the same reason that we couldn\u2019t just allow users to (more easily) update the value in email_address directly, and avoid the need for any database refactoring at all.<\/p>\n\n\n\n<p>I\u2019m going to describe the details of the plan in terms of this specific change involving email addresses, but I think many of these things can be generalized to large and high-consequence refactors in general. I\u2019ll also use terminology and example code from Rails, but I don\u2019t think there\u2019s anything here that really depends on Rails specifically.<\/p>\n\n\n\n<h3 id=\"Establish-Concepts-Early\">Establish Concepts Early<\/h3>\n\n\n\n<p>In order to be more specific about the various things that email_address was being used for, we established two distinct concepts, manifested as methods on the User class. A user\u2019s primary_email is the address at which they wish to receive actual emails, and their institution_managed_email is that \u201cidentifier\u201d email that their educational institution or employer uses to identify them as a student \/ employee. Initially, these would be the same address, just copied over from the old email_address column. But the logic for selecting the correct address was, from the beginning, the final logic that we wanted after all changes had been made.<sup>4 <\/sup>This setup means that we only had to update each email_address reference once, and once we actually add the ability for users to add emails and select which one is primary, we don\u2019t need to re-review everything to make sure the correct address is being used for each situation.<\/p>\n\n\n\n<h3 id=\"Take-your-Checklist-Seriously\">Take your Checklist Seriously<\/h3>\n\n\n\n<p>Any project of this size needs some sort of checklist, both to make sure you don\u2019t forget anything, and as a way to keep people updated on the project\u2019s progress. Creating and maintaining that checklist was more difficult than usual for this project, due to the sheer number of individual changes that needed to be made, as well as the fact that items were being added to and removed from the list all the time (any time someone added or removed code which referenced the email_address column).<\/p>\n\n\n\n<p>The \u201creal\u201d checklist is ultimately the codebase itself \u2013 the amount of work we have left to do is exactly equal to the number of remaining references to the email_address column. But as mentioned previously, not every instance of the string email_address in the codebase is actually something that needs to change, so even <em>reviewing<\/em> this \u201cchecklist\u201d to see what\u2019s still left is quite tedious. It also involves a lot of duplicated work, because you end up re-reviewing each of the hundreds of email_addresses that <em>don\u2019t<\/em> need to change, every time you want to check what\u2019s left to do.<\/p>\n\n\n\n<p>Any checklist external to the codebase (e.g., Jira issues) has other problems. If you summarize a bunch of references together (by feature, by workflow, or whatever), then it\u2019s likely that a lot of \u201cmiscellaneous\u201d references will slip through the cracks. If you make the checklist items very specific (in the extreme case, one Jira issue per reference in code) then the work of creating and maintaining the checklist itself becomes significant overhead. And you still have to do the thing where you re-review the whole codebase periodically, in order to find new references that need to be added to the list.<\/p>\n\n\n\n<h4>Ultimately, I settled on a checklist system based on code comments:<\/h4>\n\n\n\n<ul><li>Create a dedicated git branch, so you can add comments all over the codebase without interfering with anything else<\/li><li>Do a global search for \\bemail_address\\b and start reviewing every result<\/li><li>On each line that has been reviewed, add a comment with something unique that other people probably won\u2019t use in unrelated comments or code \u2013 I decided on the envelope emoji because this is an email project \u2709\ufe0f<\/li><li>On each line that doesn\u2019t need to be changed, add something else to denote that \u2013 how about a check mark emoji \u2714\ufe0f<\/li><li>Now, you can find all unreviewed references using a negative lookahead regex search: \\bemail_address\\b(?!.*\u2709)<\/li><li>Similarly, you can find all items on the \u201ctodo list\u201d with: \\bemail_address\\b(?!.*\u2714\ufe0f)<\/li><li>Periodically merge the main branch into the checklist branch, and review all the new references that people added<\/li><\/ul>\n\n\n\n<h3 id=\"Make-the-Correct-Logic-Easy\">Make the Correct Logic Easy<\/h3>\n\n\n\n<p>In the new email model, it\u2019s pretty straightforward to start from a user and find the correct email address given the situation. What was previously user.email_address would now be something like user.user_email_addresses.find_by(primary: true).email_address. That\u2019s enough to warrant adding a helper method to the User class (user.primary_email is nicer than writing out the whole thing every time), but it\u2019s not absolutely critical; people could get along fine if that was all they needed to figure out. But other use cases are more complex. Like if you have an email address, and you want to find which user is associated with it, there\u2019s more considerations than might be obvious at first glance. Should it matter whether it\u2019s the primary_email or institution_managed_email, or should we match on either one? We\u2019ll need to also add a condition for the user_email_addresses.confirmed column, to ensure that we don\u2019t match on an email which a user hasn\u2019t actually confirmed they have access to. But an annoying, very non-obvious detail is that an institution_managed email may or may not be confirmed (because\u2026 legacy code, just don\u2019t worry about it). So the logic that you probably want is:<\/p>\n\n\n\n<figure class=\"wp-block-embed is-type-rich is-provider-embed-handler wp-block-embed-embed-handler\"><div class=\"wp-block-embed__wrapper\">\n<style>.gist table { margin-bottom: 0; }<\/style><div style=\"tab-size: 8\" id=\"gist109593312\" class=\"gist\">\n    <div class=\"gist-file\" translate=\"no\">\n      <div class=\"gist-data\">\n        <div class=\"js-gist-file-update-container js-task-list-container file-box\">\n  <div id=\"file-1801126175_1-rb\" class=\"file my-2\">\n    \n  <div itemprop=\"text\" class=\"Box-body p-0 blob-wrapper data type-ruby  \">\n\n      \n<div >\n  \n  <table class=\"highlight tab-size js-file-line-container\" data-tab-size=\"8\" data-paste-markdown-skip>\n        <tr>\n          <td id=\"file-1801126175_1-rb-L1\" class=\"blob-num js-line-number\" data-line-number=\"1\"><\/td>\n          <td id=\"file-1801126175_1-rb-LC1\" class=\"blob-code blob-code-inner js-file-line\"><span class=pl-v>User<\/span><span class=pl-kos>.<\/span><span class=pl-en>joins<\/span><span class=pl-kos>(<\/span><span class=pl-pds>:user_email_addresses<\/span><span class=pl-kos>)<\/span><span class=pl-kos>.<\/span><span class=pl-en>find_by<\/span><span class=pl-kos>(<\/span><\/td>\n        <\/tr>\n        <tr>\n          <td id=\"file-1801126175_1-rb-L2\" class=\"blob-num js-line-number\" data-line-number=\"2\"><\/td>\n          <td id=\"file-1801126175_1-rb-LC2\" class=\"blob-code blob-code-inner js-file-line\">  <span class=pl-s>&lt;&lt;~SQL<\/span><span class=pl-kos>,<\/span><span class=pl-s><\/span><\/td>\n        <\/tr>\n        <tr>\n          <td id=\"file-1801126175_1-rb-L3\" class=\"blob-num js-line-number\" data-line-number=\"3\"><\/td>\n          <td id=\"file-1801126175_1-rb-LC3\" class=\"blob-code blob-code-inner js-file-line\"><span class=pl-s>    user_email_addresses.email_address = ?<\/span><\/td>\n        <\/tr>\n        <tr>\n          <td id=\"file-1801126175_1-rb-L4\" class=\"blob-num js-line-number\" data-line-number=\"4\"><\/td>\n          <td id=\"file-1801126175_1-rb-LC4\" class=\"blob-code blob-code-inner js-file-line\"><span class=pl-s>    AND (<\/span><\/td>\n        <\/tr>\n        <tr>\n          <td id=\"file-1801126175_1-rb-L5\" class=\"blob-num js-line-number\" data-line-number=\"5\"><\/td>\n          <td id=\"file-1801126175_1-rb-LC5\" class=\"blob-code blob-code-inner js-file-line\"><span class=pl-s>      user_email_addresses.confirmed<\/span><\/td>\n        <\/tr>\n        <tr>\n          <td id=\"file-1801126175_1-rb-L6\" class=\"blob-num js-line-number\" data-line-number=\"6\"><\/td>\n          <td id=\"file-1801126175_1-rb-LC6\" class=\"blob-code blob-code-inner js-file-line\"><span class=pl-s>      OR user_email_addresses.institution_managed<\/span><\/td>\n        <\/tr>\n        <tr>\n          <td id=\"file-1801126175_1-rb-L7\" class=\"blob-num js-line-number\" data-line-number=\"7\"><\/td>\n          <td id=\"file-1801126175_1-rb-LC7\" class=\"blob-code blob-code-inner js-file-line\"><span class=pl-s>    )<\/span><\/td>\n        <\/tr>\n        <tr>\n          <td id=\"file-1801126175_1-rb-L8\" class=\"blob-num js-line-number\" data-line-number=\"8\"><\/td>\n          <td id=\"file-1801126175_1-rb-LC8\" class=\"blob-code blob-code-inner js-file-line\"><span class=pl-s>  SQL<\/span><\/td>\n        <\/tr>\n        <tr>\n          <td id=\"file-1801126175_1-rb-L9\" class=\"blob-num js-line-number\" data-line-number=\"9\"><\/td>\n          <td id=\"file-1801126175_1-rb-LC9\" class=\"blob-code blob-code-inner js-file-line\">  <span class=pl-en>email<\/span><\/td>\n        <\/tr>\n        <tr>\n          <td id=\"file-1801126175_1-rb-L10\" class=\"blob-num js-line-number\" data-line-number=\"10\"><\/td>\n          <td id=\"file-1801126175_1-rb-LC10\" class=\"blob-code blob-code-inner js-file-line\"><span class=pl-kos>)<\/span><\/td>\n        <\/tr>\n  <\/table>\n<\/div>\n\n\n  <\/div>\n\n  <\/div>\n<\/div>\n\n      <\/div>\n      <div class=\"gist-meta\">\n        <a href=\"https:\/\/gist.github.com\/handshake-engineering-blog\/81409463d0b397fdbf6a20e488425f10\/raw\/ef84b333fe03e17e09cd8571a60093db2f9d92f0\/1801126175_1.rb\" style=\"float:right\">view raw<\/a>\n        <a href=\"https:\/\/gist.github.com\/handshake-engineering-blog\/81409463d0b397fdbf6a20e488425f10#file-1801126175_1-rb\">\n          1801126175_1.rb\n        <\/a>\n        hosted with &#10084; by <a href=\"https:\/\/github.com\">GitHub<\/a>\n      <\/div>\n    <\/div>\n<\/div>\n\n<\/div><\/figure>\n\n\n\n<p><\/p>\n\n\n\n<p>\u2026and in reality, it quickly gets more complicated than that for many other reasons which are not the focus of this blog post.<sup>5<\/sup> Suffice it to say that in order to write some of the final queries, I had to review the docs on LEFT JOIN LATERAL and other such exotic SQL syntax more than once.<\/p>\n\n\n\n<p>So, given all of that, every time I got a question from someone along the lines of \u201chow do I look up the user_email_address for\u2026\u201d, I responded with \u201clet\u2019s schedule a call so I can understand your use case, and we\u2019ll write a helper method on User for it\u201d. If the correct option isn\u2019t the easiest option (i.e., User.with_email(&#8216;someone@school.edu&#8217;)), then we\u2019re going to deal with a steady stream of bugs for the foreseeable future until it is the easiest option.<\/p>\n\n\n\n<h3 id=\"Commit-to-the-Full-Refactor\">Commit to the Full Refactor<\/h3>\n\n\n\n<p>Closely related to the previous point, the easiest and most obvious option is always going to be writing user.email_address or User.find_by(email_address: email). We could talk with everyone who makes that mistake (after the bug report comes in to let us know that said mistake was made), and tell them to use the situation-appropriate helper method instead, but then we\u2019re just going to repeat that process for every new hire, and clearly that\u2019s not sustainable.<\/p>\n\n\n\n<p>The solution is to make it <em>impossible<\/em> to use the legacy data structure. That ultimately means that we needed to drop the users.email_address column from the database. Anything short of that would still allow someone to very easily just write user.email_address and introduce a bug.<sup>6<\/sup><\/p>\n\n\n\n<p>Dropping that column is scary. It means that if any mistakes were made in the process leading up to that, and those mistakes were not caught, we have no way of reverting. There <em>are<\/em> ways (outlined in the next section) to make this less scary than it sounds initially, but it\u2019s still a huge, irreversible action at the end of a process that is otherwise designed to be easily reversible at every step. But after seriously considering all our options, this is a tradeoff I would still recommend making if you\u2019re in a situation similar to ours.<\/p>\n\n\n\n<h3 id=\"Check-Everything-at-Runtime\">Check Everything at Runtime<\/h3>\n\n\n\n<p>No matter how thorough you are with maintaining your checklist, you can only reach a certain level of confidence by just reviewing code.<\/p>\n\n\n\n<p>To be certain that nothing was referencing email_address anymore, we overrode the getter and setter methods for email_address and added some extra logic. In development and test environments, both getter and setter would raise an exception if called from anywhere besides the write-forwarding code. This already surfaced a couple of missed references just by running the full test suite, and it ensured that anyone who typed user.email_address got immediate, unignorable feedback that they should use the new helper methods instead. In staging and production environments, we just logged that a reference had happened but still returned\/set the value as normal. Letting that run in production for a few days surfaced another missed reference or two that the test suite had missed.<\/p>\n\n\n\n<p>Those overrides helped a lot, but there are other ways to reference the column that don\u2019t involve calling the getter or setter methods. The most notable of those is just using it in a query like User.where(email_address: email). For this, we used ActiveRecord\u2019s ignored_columns feature. Unfortunately, that throws errors when you try to use the ignored column, rather than just logging it like we did with the getter\/setter overrides. So we made the change in staging environments well ahead of when we planned on doing it in production, and just watched for errors that looked related.<\/p>\n\n\n\n<p>I\u2019m happy to report that, thanks to these precautions, when we actually dropped the email_address column it was totally anti-climactic.<\/p>\n\n\n\n<h2 id=\"Looking-Back\">Looking Back<\/h2>\n\n\n\n<p>This was quite a lot of work. And a lot of it was kinda tedious, to be honest. If I had been able to convince myself that another, easier option was really going to work long-term, I would have been happy to live with something a bit more hacky.<\/p>\n\n\n\n<p>But it was also not nearly as intimidating as it looked at first. Time-consuming, yes, but with proper planning and the resolve to see it through to the end, it\u2019s entirely doable.&nbsp;<\/p>\n\n\n\n<p><\/p>\n\n\n\n<p><em>Photo by&nbsp;<a href=\"https:\/\/www.pexels.com\/@goumbik?utm_content=attributionCopyText&amp;utm_medium=referral&amp;utm_source=pexels\" target=\"_blank\" rel=\"noreferrer noopener\">Lukas<\/a>&nbsp;from&nbsp;<a href=\"https:\/\/www.pexels.com\/photo\/person-encoding-in-laptop-574071\/?utm_content=attributionCopyText&amp;utm_medium=referral&amp;utm_source=pexels\" target=\"_blank\" rel=\"noreferrer noopener\">Pexels<\/a><\/em><\/p>\n\n\n\n<p><\/p>\n\n\n\n<h4 id=\"Footnotes\">Footnotes<\/h4>\n\n\n\n<p><sup>1<\/sup> It might even be technically impossible, due to the potential for metaprogramming and whatnot, to determine this prior to runtime. But it\u2019s been a while since my programming languages course in college, so I\u2019m just going to stick with \u201cdifficult\u201d.<\/p>\n\n\n\n<p><sup>2<\/sup> This was the first time in my career that I felt like maybe I should give an estimate on how much time it would take me to generate an estimate.<\/p>\n\n\n\n<p><sup>3<\/sup> The main reason this is actually quite important is that students often lose access to their @school.edu email addresses when they graduate, and this change will make it much easier for them to retain access to their Handshake account after graduation. If it were just a matter of being slightly more convenient to change your contact email, I don\u2019t think I would ever have argued this was worth it.<\/p>\n\n\n\n<p><sup>4<\/sup> The only exception to this was that there was initially fallback logic in place to return email_address in the event that the lookup on user_email_addresses returned null. That fallback was removed eventually, but the rest of the logic remained unchanged.<\/p>\n\n\n\n<p><sup>5<\/sup> Did I mention that we\u2019re dealing with legacy code? We\u2019re dealing with legacy code. We need to draw a line somewhere for what we\u2019re going to improve, and what we\u2019re going to work around.<\/p>\n\n\n\n<p><sup>6<\/sup> We could add some overrides to the User class, to make it so that user.email_address will throw an error, but stop short of dropping the actual database column. But there\u2019s still the whole data team and others who read from the database directly using SQL statements, so overriding ActiveRecord methods doesn\u2019t give them any cues at all.<\/p>\n","protected":false},"excerpt":{"rendered":"<p>Software developer Josh Warfield explains the process for making complicated Handshake product changes without negative ripple effects.<\/p>\n","protected":false},"author":167034976,"featured_media":9381,"menu_order":0,"template":"","our_team_category":[1615],"our_team_tag":[1539,1648],"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v16.8 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>How to Make Major Changes to Your User Table Without Breaking the World<\/title>\n<meta name=\"description\" content=\"Software developer Josh Warfield explains the process for making complicated Handshake product changes without negative ripple effects.\" \/>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/joinhandshake.com\/blog\/our-team\/how-to-make-major-changes-to-your-user-table\/\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"How to Make Major Changes to Your User Table Without Breaking the World\" \/>\n<meta property=\"og:description\" content=\"Software developer Josh Warfield explains the process for making complicated Handshake product changes without negative ripple effects.\" \/>\n<meta property=\"og:url\" content=\"https:\/\/joinhandshake.com\/blog\/our-team\/how-to-make-major-changes-to-your-user-table\/\" \/>\n<meta property=\"og:site_name\" content=\"Handshake\" \/>\n<meta property=\"article:publisher\" content=\"https:\/\/www.facebook.com\/joinhandshake\" \/>\n<meta property=\"article:modified_time\" content=\"2021-05-26T22:39:34+00:00\" \/>\n<meta property=\"og:image\" content=\"https:\/\/i2.wp.com\/joinhandshake.com\/wp-content\/uploads\/2021\/05\/HS_Web_Sharing-Cover.jpg?fit=1801%2C946&#038;ssl=1\" \/>\n\t<meta property=\"og:image:width\" content=\"1801\" \/>\n\t<meta property=\"og:image:height\" content=\"946\" \/>\n<meta name=\"twitter:card\" content=\"summary_large_image\" \/>\n<meta name=\"twitter:site\" content=\"@joinhandshake\" \/>\n<meta name=\"twitter:label1\" content=\"Est. reading time\" \/>\n\t<meta name=\"twitter:data1\" content=\"13 minutes\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"Organization\",\"@id\":\"https:\/\/joinhandshake.com\/#organization\",\"name\":\"Handshake\",\"url\":\"https:\/\/joinhandshake.com\/\",\"sameAs\":[\"https:\/\/www.facebook.com\/joinhandshake\",\"https:\/\/www.instagram.com\/joinhandshake\",\"https:\/\/www.linkedin.com\/company\/team-handshake\/\",\"https:\/\/twitter.com\/joinhandshake\"],\"logo\":{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/joinhandshake.com\/#logo\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/i1.wp.com\/joinhandshake.com\/wp-content\/uploads\/2019\/11\/handshake-share.png?fit=1200%2C628&ssl=1\",\"contentUrl\":\"https:\/\/i1.wp.com\/joinhandshake.com\/wp-content\/uploads\/2019\/11\/handshake-share.png?fit=1200%2C628&ssl=1\",\"width\":1200,\"height\":628,\"caption\":\"Handshake\"},\"image\":{\"@id\":\"https:\/\/joinhandshake.com\/#logo\"}},{\"@type\":\"WebSite\",\"@id\":\"https:\/\/joinhandshake.com\/#website\",\"url\":\"https:\/\/joinhandshake.com\/\",\"name\":\"Handshake\",\"description\":\"\",\"publisher\":{\"@id\":\"https:\/\/joinhandshake.com\/#organization\"},\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/joinhandshake.com\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"},{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/joinhandshake.com\/blog\/our-team\/how-to-make-major-changes-to-your-user-table\/#primaryimage\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/i0.wp.com\/joinhandshake.com\/wp-content\/uploads\/2021\/05\/pexels-lukas-574071.jpg?fit=6144%2C4069&ssl=1\",\"contentUrl\":\"https:\/\/i0.wp.com\/joinhandshake.com\/wp-content\/uploads\/2021\/05\/pexels-lukas-574071.jpg?fit=6144%2C4069&ssl=1\",\"width\":6144,\"height\":4069},{\"@type\":\"WebPage\",\"@id\":\"https:\/\/joinhandshake.com\/blog\/our-team\/how-to-make-major-changes-to-your-user-table\/#webpage\",\"url\":\"https:\/\/joinhandshake.com\/blog\/our-team\/how-to-make-major-changes-to-your-user-table\/\",\"name\":\"How to Make Major Changes to Your User Table Without Breaking the World\",\"isPartOf\":{\"@id\":\"https:\/\/joinhandshake.com\/#website\"},\"primaryImageOfPage\":{\"@id\":\"https:\/\/joinhandshake.com\/blog\/our-team\/how-to-make-major-changes-to-your-user-table\/#primaryimage\"},\"datePublished\":\"2021-05-26T22:39:32+00:00\",\"dateModified\":\"2021-05-26T22:39:34+00:00\",\"description\":\"Software developer Josh Warfield explains the process for making complicated Handshake product changes without negative ripple effects.\",\"breadcrumb\":{\"@id\":\"https:\/\/joinhandshake.com\/blog\/our-team\/how-to-make-major-changes-to-your-user-table\/#breadcrumb\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/joinhandshake.com\/blog\/our-team\/how-to-make-major-changes-to-your-user-table\/\"]}]},{\"@type\":\"BreadcrumbList\",\"@id\":\"https:\/\/joinhandshake.com\/blog\/our-team\/how-to-make-major-changes-to-your-user-table\/#breadcrumb\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"name\":\"Home\",\"item\":\"https:\/\/joinhandshake.com\/\"},{\"@type\":\"ListItem\",\"position\":2,\"name\":\"How to Make Major Changes to Your User Table Without Breaking the World\"}]}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","yoast_head_json":{"title":"How to Make Major Changes to Your User Table Without Breaking the World","description":"Software developer Josh Warfield explains the process for making complicated Handshake product changes without negative ripple effects.","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/joinhandshake.com\/blog\/our-team\/how-to-make-major-changes-to-your-user-table\/","og_locale":"en_US","og_type":"article","og_title":"How to Make Major Changes to Your User Table Without Breaking the World","og_description":"Software developer Josh Warfield explains the process for making complicated Handshake product changes without negative ripple effects.","og_url":"https:\/\/joinhandshake.com\/blog\/our-team\/how-to-make-major-changes-to-your-user-table\/","og_site_name":"Handshake","article_publisher":"https:\/\/www.facebook.com\/joinhandshake","article_modified_time":"2021-05-26T22:39:34+00:00","og_image":[{"width":1801,"height":946,"url":"https:\/\/i2.wp.com\/joinhandshake.com\/wp-content\/uploads\/2021\/05\/HS_Web_Sharing-Cover.jpg?fit=1801%2C946&ssl=1","path":"\/srv\/htdocs\/wp-content\/uploads\/2021\/05\/HS_Web_Sharing-Cover.jpg","size":"full","id":9282,"alt":"","pixels":1703746,"type":"image\/jpeg"}],"twitter_card":"summary_large_image","twitter_site":"@joinhandshake","twitter_misc":{"Est. reading time":"13 minutes"},"schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"Organization","@id":"https:\/\/joinhandshake.com\/#organization","name":"Handshake","url":"https:\/\/joinhandshake.com\/","sameAs":["https:\/\/www.facebook.com\/joinhandshake","https:\/\/www.instagram.com\/joinhandshake","https:\/\/www.linkedin.com\/company\/team-handshake\/","https:\/\/twitter.com\/joinhandshake"],"logo":{"@type":"ImageObject","@id":"https:\/\/joinhandshake.com\/#logo","inLanguage":"en-US","url":"https:\/\/i1.wp.com\/joinhandshake.com\/wp-content\/uploads\/2019\/11\/handshake-share.png?fit=1200%2C628&ssl=1","contentUrl":"https:\/\/i1.wp.com\/joinhandshake.com\/wp-content\/uploads\/2019\/11\/handshake-share.png?fit=1200%2C628&ssl=1","width":1200,"height":628,"caption":"Handshake"},"image":{"@id":"https:\/\/joinhandshake.com\/#logo"}},{"@type":"WebSite","@id":"https:\/\/joinhandshake.com\/#website","url":"https:\/\/joinhandshake.com\/","name":"Handshake","description":"","publisher":{"@id":"https:\/\/joinhandshake.com\/#organization"},"potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/joinhandshake.com\/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"},{"@type":"ImageObject","@id":"https:\/\/joinhandshake.com\/blog\/our-team\/how-to-make-major-changes-to-your-user-table\/#primaryimage","inLanguage":"en-US","url":"https:\/\/i0.wp.com\/joinhandshake.com\/wp-content\/uploads\/2021\/05\/pexels-lukas-574071.jpg?fit=6144%2C4069&ssl=1","contentUrl":"https:\/\/i0.wp.com\/joinhandshake.com\/wp-content\/uploads\/2021\/05\/pexels-lukas-574071.jpg?fit=6144%2C4069&ssl=1","width":6144,"height":4069},{"@type":"WebPage","@id":"https:\/\/joinhandshake.com\/blog\/our-team\/how-to-make-major-changes-to-your-user-table\/#webpage","url":"https:\/\/joinhandshake.com\/blog\/our-team\/how-to-make-major-changes-to-your-user-table\/","name":"How to Make Major Changes to Your User Table Without Breaking the World","isPartOf":{"@id":"https:\/\/joinhandshake.com\/#website"},"primaryImageOfPage":{"@id":"https:\/\/joinhandshake.com\/blog\/our-team\/how-to-make-major-changes-to-your-user-table\/#primaryimage"},"datePublished":"2021-05-26T22:39:32+00:00","dateModified":"2021-05-26T22:39:34+00:00","description":"Software developer Josh Warfield explains the process for making complicated Handshake product changes without negative ripple effects.","breadcrumb":{"@id":"https:\/\/joinhandshake.com\/blog\/our-team\/how-to-make-major-changes-to-your-user-table\/#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/joinhandshake.com\/blog\/our-team\/how-to-make-major-changes-to-your-user-table\/"]}]},{"@type":"BreadcrumbList","@id":"https:\/\/joinhandshake.com\/blog\/our-team\/how-to-make-major-changes-to-your-user-table\/#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Home","item":"https:\/\/joinhandshake.com\/"},{"@type":"ListItem","position":2,"name":"How to Make Major Changes to Your User Table Without Breaking the World"}]}]}},"jetpack_sharing_enabled":true,"_links":{"self":[{"href":"https:\/\/joinhandshake.com\/wp-json\/wp\/v2\/our-team\/9376"}],"collection":[{"href":"https:\/\/joinhandshake.com\/wp-json\/wp\/v2\/our-team"}],"about":[{"href":"https:\/\/joinhandshake.com\/wp-json\/wp\/v2\/types\/our-team"}],"author":[{"embeddable":true,"href":"https:\/\/joinhandshake.com\/wp-json\/wp\/v2\/users\/167034976"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/joinhandshake.com\/wp-json\/wp\/v2\/media\/9381"}],"wp:attachment":[{"href":"https:\/\/joinhandshake.com\/wp-json\/wp\/v2\/media?parent=9376"}],"wp:term":[{"taxonomy":"our_team_category","embeddable":true,"href":"https:\/\/joinhandshake.com\/wp-json\/wp\/v2\/our_team_category?post=9376"},{"taxonomy":"our_team_tag","embeddable":true,"href":"https:\/\/joinhandshake.com\/wp-json\/wp\/v2\/our_team_tag?post=9376"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}